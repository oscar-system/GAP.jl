#############################################################################
##
#W  loewy_ext.tst      GAP 4 package JuliaExperimental          Thomas Breuer
##
gap> START_TEST( "loewy_ext.tst" );

##  Test the general functionality of Singer algebras (not Julia related).
gap> a:= SingerAlgebra( 5, 2, 4 );;  ParametersOfSingerAlgebra( a );
[ 5, 2, 4 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  CanonicalBasis( a );
CanonicalBasis( A(5,2,4) )
gap> a:= SingerAlgebra( 5, 2, 4 );;  Zero( Random( a ) );
0*b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  Representative( a );
b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  One( a );
b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  Zero( a );
0*b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  GeneratorsOfAlgebra( a );
[ b0, b1, b2, b3, b4, b5, b6 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  GeneratorsOfAlgebraWithOne( a );
[ b0, b1, b2, b3, b4, b5, b6 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  Centre( a );
A(5,2,4)

##  Auxiliary function:
##  Test only one generator from each cyclic group of prime residues.
gap> SmallestPrimeResidueGenerators:= e -> Filtered( PrimeResidues( e ),
>        q -> ForAll( PrimeResidues( OrderMod( q, e ) ), 
>                     i -> PowerModInt( q, i, e ) >= q ) );;

##  Test the minimal degree computation (in Julia).
gap> for e in [ 2 .. 30 ] do
>      for q in SmallestPrimeResidueGenerators( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        m:= MinimalDegreeOfSingerAlgebra( a );
>        if m <> MinimalDegreeOfSingerAlgebra( q, e ) then
>          Error( "bad result for ", [ q, e ], "\n"  );
>        fi;
>        Print( [ q, e, m ], "\n" );
>      od;
>    od;
[ 3, 2, 2 ]
[ 4, 3, 3 ]
[ 2, 3, 2 ]
[ 5, 4, 4 ]
[ 3, 4, 2 ]
[ 6, 5, 5 ]
[ 2, 5, 2 ]
[ 4, 5, 2 ]
[ 7, 6, 6 ]
[ 5, 6, 2 ]
[ 8, 7, 7 ]
[ 2, 7, 3 ]
[ 3, 7, 2 ]
[ 6, 7, 2 ]
[ 9, 8, 8 ]
[ 3, 8, 4 ]
[ 5, 8, 4 ]
[ 7, 8, 2 ]
[ 10, 9, 9 ]
[ 2, 9, 2 ]
[ 4, 9, 3 ]
[ 8, 9, 2 ]
[ 11, 10, 10 ]
[ 3, 10, 2 ]
[ 9, 10, 2 ]
[ 12, 11, 11 ]
[ 2, 11, 2 ]
[ 3, 11, 3 ]
[ 10, 11, 2 ]
[ 13, 12, 12 ]
[ 5, 12, 4 ]
[ 7, 12, 6 ]
[ 11, 12, 2 ]
[ 14, 13, 13 ]
[ 2, 13, 2 ]
[ 3, 13, 3 ]
[ 4, 13, 2 ]
[ 5, 13, 2 ]
[ 12, 13, 2 ]
[ 15, 14, 14 ]
[ 3, 14, 2 ]
[ 9, 14, 4 ]
[ 13, 14, 2 ]
[ 16, 15, 15 ]
[ 2, 15, 4 ]
[ 4, 15, 6 ]
[ 7, 15, 3 ]
[ 11, 15, 5 ]
[ 14, 15, 2 ]
[ 17, 16, 16 ]
[ 3, 16, 4 ]
[ 5, 16, 4 ]
[ 7, 16, 4 ]
[ 9, 16, 8 ]
[ 15, 16, 2 ]
[ 18, 17, 17 ]
[ 2, 17, 2 ]
[ 3, 17, 2 ]
[ 4, 17, 2 ]
[ 16, 17, 2 ]
[ 19, 18, 18 ]
[ 5, 18, 2 ]
[ 7, 18, 6 ]
[ 17, 18, 2 ]
[ 20, 19, 19 ]
[ 2, 19, 2 ]
[ 4, 19, 3 ]
[ 7, 19, 3 ]
[ 8, 19, 2 ]
[ 18, 19, 2 ]
[ 21, 20, 20 ]
[ 3, 20, 4 ]
[ 9, 20, 4 ]
[ 11, 20, 10 ]
[ 13, 20, 4 ]
[ 19, 20, 2 ]
[ 22, 21, 21 ]
[ 2, 21, 3 ]
[ 4, 21, 3 ]
[ 5, 21, 2 ]
[ 8, 21, 7 ]
[ 10, 21, 3 ]
[ 13, 21, 6 ]
[ 20, 21, 2 ]
[ 23, 22, 22 ]
[ 3, 22, 4 ]
[ 7, 22, 2 ]
[ 21, 22, 2 ]
[ 24, 23, 23 ]
[ 2, 23, 3 ]
[ 5, 23, 2 ]
[ 22, 23, 2 ]
[ 25, 24, 24 ]
[ 5, 24, 8 ]
[ 7, 24, 6 ]
[ 11, 24, 4 ]
[ 13, 24, 12 ]
[ 17, 24, 8 ]
[ 19, 24, 6 ]
[ 23, 24, 2 ]
[ 26, 25, 25 ]
[ 2, 25, 2 ]
[ 4, 25, 2 ]
[ 6, 25, 5 ]
[ 7, 25, 2 ]
[ 24, 25, 2 ]
[ 27, 26, 26 ]
[ 3, 26, 6 ]
[ 5, 26, 2 ]
[ 7, 26, 2 ]
[ 17, 26, 2 ]
[ 25, 26, 2 ]
[ 28, 27, 27 ]
[ 2, 27, 2 ]
[ 4, 27, 3 ]
[ 8, 27, 2 ]
[ 10, 27, 9 ]
[ 26, 27, 2 ]
[ 29, 28, 28 ]
[ 3, 28, 2 ]
[ 5, 28, 4 ]
[ 9, 28, 4 ]
[ 11, 28, 4 ]
[ 13, 28, 4 ]
[ 15, 28, 14 ]
[ 27, 28, 2 ]
[ 30, 29, 29 ]
[ 2, 29, 2 ]
[ 4, 29, 2 ]
[ 7, 29, 4 ]
[ 12, 29, 2 ]
[ 28, 29, 2 ]
[ 31, 30, 30 ]
[ 7, 30, 6 ]
[ 11, 30, 10 ]
[ 17, 30, 4 ]
[ 19, 30, 6 ]
[ 29, 30, 2 ]

##  Test the Loewy length computations in Julia.
gap> for e in [ 2 .. 30 ] do
>      for q in SmallestPrimeResidueGenerators( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          l:= LoewyLength( a );
>          if l <> LoewyLength( q, n, e ) then
>            Error( "bad result for ", [ q, n, e ], "\n"  );
>          fi;
>          Print( [ q, e, l ], "\n" );
>        fi;
>      od;
>    od;
[ 3, 2, 2 ]
[ 4, 3, 2 ]
[ 2, 3, 2 ]
[ 5, 4, 2 ]
[ 3, 4, 3 ]
[ 6, 5, 2 ]
[ 2, 5, 3 ]
[ 4, 5, 4 ]
[ 7, 6, 2 ]
[ 5, 6, 5 ]
[ 8, 7, 2 ]
[ 2, 7, 2 ]
[ 3, 7, 7 ]
[ 6, 7, 6 ]
[ 9, 8, 2 ]
[ 3, 8, 2 ]
[ 5, 8, 3 ]
[ 7, 8, 7 ]
[ 10, 9, 2 ]
[ 2, 9, 4 ]
[ 4, 9, 4 ]
[ 8, 9, 8 ]
[ 11, 10, 2 ]
[ 3, 10, 5 ]
[ 9, 10, 9 ]
[ 12, 11, 2 ]
[ 2, 11, 6 ]
[ 3, 11, 4 ]
[ 10, 11, 10 ]
[ 13, 12, 2 ]
[ 5, 12, 3 ]
[ 7, 12, 3 ]
[ 11, 12, 11 ]
[ 14, 13, 2 ]
[ 2, 13, 7 ]
[ 3, 13, 3 ]
[ 4, 13, 10 ]
[ 5, 13, 9 ]
[ 12, 13, 12 ]
[ 15, 14, 2 ]
[ 3, 14, 7 ]
[ 9, 14, 7 ]
[ 13, 14, 13 ]
[ 16, 15, 2 ]
[ 2, 15, 2 ]
[ 4, 15, 2 ]
[ 7, 15, 9 ]
[ 11, 15, 5 ]
[ 14, 15, 14 ]
[ 17, 16, 2 ]
[ 3, 16, 3 ]
[ 5, 16, 5 ]
[ 7, 16, 4 ]
[ 9, 16, 3 ]
[ 15, 16, 15 ]
[ 18, 17, 2 ]
[ 2, 17, 5 ]
[ 4, 17, 7 ]
[ 16, 17, 16 ]
[ 19, 18, 2 ]
[ 5, 18, 13 ]
[ 7, 18, 4 ]
[ 17, 18, 17 ]
[ 20, 19, 2 ]
[ 7, 19, 7 ]
[ 18, 19, 18 ]
[ 21, 20, 2 ]
[ 3, 20, 3 ]
[ 9, 20, 5 ]
[ 11, 20, 3 ]
[ 13, 20, 13 ]
[ 19, 20, 19 ]
[ 22, 21, 2 ]
[ 2, 21, 3 ]
[ 4, 21, 4 ]
[ 5, 21, 13 ]
[ 8, 21, 3 ]
[ 13, 21, 5 ]
[ 20, 21, 20 ]
[ 23, 22, 2 ]
[ 3, 22, 3 ]
[ 21, 22, 21 ]
[ 24, 23, 2 ]
[ 2, 23, 4 ]
[ 22, 23, 22 ]
[ 25, 24, 2 ]
[ 5, 24, 2 ]
[ 7, 24, 3 ]
[ 11, 24, 6 ]
[ 13, 24, 3 ]
[ 17, 24, 5 ]
[ 19, 24, 7 ]
[ 23, 24, 23 ]
[ 26, 25, 2 ]
[ 6, 25, 6 ]
[ 7, 25, 13 ]
[ 24, 25, 24 ]
[ 27, 26, 2 ]
[ 3, 26, 2 ]
[ 5, 26, 9 ]
[ 25, 26, 25 ]
[ 28, 27, 2 ]
[ 2, 27, 10 ]
[ 4, 27, 10 ]
[ 8, 27, 22 ]
[ 10, 27, 4 ]
[ 26, 27, 26 ]
[ 29, 28, 2 ]
[ 3, 28, 7 ]
[ 5, 28, 7 ]
[ 9, 28, 7 ]
[ 13, 28, 7 ]
[ 15, 28, 3 ]
[ 27, 28, 27 ]
[ 30, 29, 2 ]
[ 12, 29, 23 ]
[ 28, 29, 28 ]
[ 31, 30, 2 ]
[ 7, 30, 5 ]
[ 11, 30, 3 ]
[ 17, 30, 17 ]
[ 19, 30, 7 ]
[ 29, 30, 29 ]

##  Test 'DimensionsLoewyFactors'.
gap> for e in [ 2 .. 30 ] do
>      for q in SmallestPrimeResidueGenerators( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          v:= DimensionsLoewyFactors( a );
>          Print( [ q, e, v ], "\n" );
>        fi;
>      od;
>    od;
[ 3, 2, [ 1, 1 ] ]
[ 4, 3, [ 1, 1 ] ]
[ 2, 3, [ 1, 1 ] ]
[ 5, 4, [ 1, 1 ] ]
[ 3, 4, [ 1, 1, 1 ] ]
[ 6, 5, [ 1, 1 ] ]
[ 2, 5, [ 1, 2, 1 ] ]
[ 4, 5, [ 1, 1, 1, 1 ] ]
[ 7, 6, [ 1, 1 ] ]
[ 5, 6, [ 1, 1, 1, 1, 1 ] ]
[ 8, 7, [ 1, 1 ] ]
[ 2, 7, [ 1, 1 ] ]
[ 3, 7, [ 1, 17, 38, 31, 14, 3, 1 ] ]
[ 6, 7, [ 1, 1, 1, 1, 1, 1 ] ]
[ 9, 8, [ 1, 1 ] ]
[ 3, 8, [ 1, 1 ] ]
[ 5, 8, [ 1, 2, 1 ] ]
[ 7, 8, [ 1, 1, 1, 1, 1, 1, 1 ] ]
[ 10, 9, [ 1, 1 ] ]
[ 2, 9, [ 1, 3, 3, 1 ] ]
[ 4, 9, [ 1, 3, 3, 1 ] ]
[ 8, 9, [ 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 11, 10, [ 1, 1 ] ]
[ 3, 10, [ 1, 2, 3, 2, 1 ] ]
[ 9, 10, [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 12, 11, [ 1, 1 ] ]
[ 2, 11, [ 1, 27, 40, 20, 5, 1 ] ]
[ 3, 11, [ 1, 11, 10, 1 ] ]
[ 10, 11, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 13, 12, [ 1, 1 ] ]
[ 5, 12, [ 1, 1, 1 ] ]
[ 7, 12, [ 1, 3, 1 ] ]
[ 11, 12, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 14, 13, [ 1, 1 ] ]
[ 2, 13, [ 1, 58, 127, 92, 31, 6, 1 ] ]
[ 3, 13, [ 1, 1, 1 ] ]
[ 4, 13, [ 1, 23, 56, 84, 74, 44, 22, 8, 3, 1 ] ]
[ 5, 13, [ 1, 6, 11, 12, 9, 4, 3, 2, 1 ] ]
[ 12, 13, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 15, 14, [ 1, 1 ] ]
[ 3, 14, [ 1, 11, 18, 13, 6, 3, 1 ] ]
[ 9, 14, [ 1, 7, 15, 16, 10, 3, 1 ] ]
[ 13, 14, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 16, 15, [ 1, 1 ] ]
[ 2, 15, [ 1, 1 ] ]
[ 4, 15, [ 1, 1 ] ]
[ 7, 15, [ 1, 10, 28, 38, 39, 24, 16, 4, 1 ] ]
[ 11, 15, [ 1, 2, 3, 2, 1 ] ]
[ 14, 15, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 17, 16, [ 1, 1 ] ]
[ 3, 16, [ 1, 4, 1 ] ]
[ 5, 16, [ 1, 8, 22, 8, 1 ] ]
[ 7, 16, [ 1, 1, 1, 1 ] ]
[ 9, 16, [ 1, 4, 1 ] ]
[ 15, 16, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 18, 17, [ 1, 1 ] ]
[ 2, 17, [ 1, 4, 6, 4, 1 ] ]
[ 4, 17, [ 1, 2, 3, 4, 3, 2, 1 ] ]
[ 16, 17, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 19, 18, [ 1, 1 ] ]
[ 5, 18, [ 1, 33, 90, 142, 177, 168, 127, 72, 33, 16, 6, 3, 1 ] ]
[ 7, 18, [ 1, 9, 9, 1 ] ]
[ 17, 18, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 20, 19, [ 1, 1 ] ]
[ 7, 19, [ 1, 7, 7, 1, 1, 1, 1 ] ]
[ 18, 19, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 21, 20, [ 1, 1 ] ]
[ 3, 20, [ 1, 3, 1 ] ]
[ 9, 20, [ 1, 1, 1, 1, 1 ] ]
[ 11, 20, [ 1, 5, 1 ] ]
[ 13, 20, [ 1, 19, 53, 107, 177, 235, 273, 255, 177, 91, 33, 7, 1 ] ]
[ 19, 20, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 22, 21, [ 1, 1 ] ]
[ 2, 21, [ 1, 2, 1 ] ]
[ 4, 21, [ 1, 1, 1, 1 ] ]
[ 5, 21, [ 1, 29, 74, 120, 157, 140, 99, 62, 35, 16, 8, 3, 1 ] ]
[ 8, 21, [ 1, 2, 1 ] ]
[ 13, 21, [ 1, 3, 3, 1, 1 ] ]
[ 20, 21, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 23, 22, [ 1, 1 ] ]
[ 3, 22, [ 1, 10, 1 ] ]
[ 21, 22, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 24, 23, [ 1, 1 ] ]
[ 2, 23, [ 1, 44, 44, 1 ] ]
[ 22, 23, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 
     ] ]
[ 25, 24, [ 1, 1 ] ]
[ 5, 24, [ 1, 1 ] ]
[ 7, 24, [ 1, 1, 1 ] ]
[ 11, 24, [ 1, 1, 1, 1, 1, 1 ] ]
[ 13, 24, [ 1, 6, 1 ] ]
[ 17, 24, [ 1, 3, 5, 3, 1 ] ]
[ 19, 24, [ 1, 2, 3, 4, 3, 2, 1 ] ]
[ 23, 24, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1 ] ]
[ 26, 25, [ 1, 1 ] ]
[ 6, 25, [ 1, 25, 130, 130, 25, 1 ] ]
[ 7, 25, [ 1, 6, 11, 16, 17, 14, 11, 6, 5, 4, 3, 2, 1 ] ]
[ 24, 25, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1 ] ]
[ 27, 26, [ 1, 1 ] ]
[ 3, 26, [ 1, 1 ] ]
[ 5, 26, [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ] ]
[ 25, 26, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1 ] ]
[ 28, 27, [ 1, 1 ] ]
[ 2, 27, [ 1, 423, 1998, 3252, 2556, 1116, 300, 54, 9, 1 ] ]
[ 4, 27, [ 1, 144, 765, 1569, 2511, 2961, 1452, 288, 18, 1 ] ]
[ 8, 27, [ 1, 57, 198, 424, 681, 915, 1090, 1206, 1212, 1102, 924, 696, 484, 
      306, 180, 112, 63, 33, 16, 6, 3, 1 ] ]
[ 10, 27, [ 1, 18, 18, 1 ] ]
[ 26, 27, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1 ] ]
[ 29, 28, [ 1, 1 ] ]
[ 3, 28, [ 1, 3, 6, 7, 6, 3, 1 ] ]
[ 5, 28, [ 1, 30, 123, 251, 135, 18, 1 ] ]
[ 9, 28, [ 1, 3, 6, 7, 6, 3, 1 ] ]
[ 13, 28, [ 1, 1, 1, 1, 1, 1, 1 ] ]
[ 15, 28, [ 1, 7, 1 ] ]
[ 27, 28, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1 ] ]
[ 30, 29, [ 1, 1 ] ]
[ 12, 29, [ 1, 10, 27, 44, 57, 66, 67, 68, 65, 66, 59, 48, 39, 30, 21, 16, 
      11, 6, 5, 4, 3, 2, 1 ] ]
[ 28, 29, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1, 1 ] ]
[ 31, 30, [ 1, 1 ] ]
[ 7, 30, [ 1, 16, 47, 16, 1 ] ]
[ 11, 30, [ 1, 3, 1 ] ]
[ 17, 30, [ 1, 43, 165, 307, 433, 435, 435, 317, 257, 155, 115, 57, 41, 15, 
      7, 1, 1 ] ]
[ 19, 30, [ 1, 3, 3, 3, 1, 1, 1 ] ]
[ 29, 30, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1, 1, 1 ] ]

##  Test 'LoewyStructureInfo'.
gap> for e in [ 2 .. 30 ] do
>      for q in SmallestPrimeResidueGenerators( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          LoewyStructureInfo( a );
>        fi;
>      od;
>    od;

##  Test large e.
gap> q:= 17;;  n:= 19;;  e:= ( q^n - 1 ) / 2;
119536217842575662423576
gap> IsSmallIntRep( e );
false
gap> a:= SingerAlgebra( q, n, e );;
gap> Dimension( a );
3
gap> data:= LoewyStructureInfo( a );;
gap> keys:= Julia.Base.keys( data );;
gap> keys:= Julia.Base.collect( keys );;
gap> Set( JuliaToGAP( IsList, keys, true ) );
[ "chain", "inputs", "layers", "ll", "m", "monomials" ]

##  Test some error messages.
gap> SingerAlgebra( 2, 2, 0 );
Error, <q>, <n>, <e> must be positive integers
gap> SingerAlgebra( 1, 2, 3 );
Error, <q> must be an integer > 1
gap> SingerAlgebra( 7, 2, 5 );
Error, <e> must divide <q>^<n> - 1
gap> MinimalDegreeOfSingerAlgebra( 1, 2 );
Error, <q> must be an integer > 1
gap> LoewyLength( 1, 2, 3 );
Error, <q> must be an integer > 1

##  Test the Julia part.
gap> Julia.LoewyStructure.test_this_module();
true

##
gap> STOP_TEST( "loewy_ext.tst" );

