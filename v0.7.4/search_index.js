var documenterSearchIndex = {"docs":
[{"location":"conversion/","page":"Conversions","title":"Conversions","text":"CurrentModule = GAP\nDocTestSetup = :(using GAP)","category":"page"},{"location":"conversion/#Conversions","page":"Conversions","title":"Conversions","text":"","category":"section"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"One of the main ideas of GAP.jl is that automatic conversions of Julia objects to GAP objects and vice versa shall be avoided whenever this is possible. For a few types of objects, such conversions are unavoidable, see Automatic GAP-to-Julia and Julia-to-GAP Conversions. In all other situations, the conversions between GAP objects and corresponding Julia objects can be performed using gap_to_julia and julia_to_gap, see Explicit GAP-to-Julia and Julia-to-GAP Conversions, respectively.","category":"page"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"For convenience, also constructor methods are provided, for example Vector{Int64}(obj) can be used instead of GAP.gap_to_julia(Vector{Int64}, obj), where obj is a GAP list of integers; see Constructor Methods for GAP-to-Julia Conversions for a description of these methods. For Julia-to-GAP conversions, one can use for example GapObj(obj), where obj is a Julia object, see GapObj.","category":"page"},{"location":"conversion/#Automatic-GAP-to-Julia-and-Julia-to-GAP-Conversions","page":"Conversions","title":"Automatic GAP-to-Julia and Julia-to-GAP Conversions","text":"","category":"section"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"When one calls a GAP function with Julia objects as arguments, or a Julia function with GAP objects as arguments, the arguments are in general not automatically converted to GAP objects or Julia objects, respectively. The exceptions are as follows.","category":"page"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"GAP's immediate integers (in the range -2^60 to 2^60-1) are automatically converted to Julia's Int64 objects; Julia's Int64 objects are automatically converted to GAP's immediate integers if they fit, and to GAP's large integers otherwise.\nGAP's immediate finite field elements are automatically converted to Julia's GAP.FFE objects, and vice versa.\nGAP's true and false are automatically converted to Julia's true and false, and vice versa.","category":"page"},{"location":"conversion/#Explicit-GAP-to-Julia-and-Julia-to-GAP-Conversions","page":"Conversions","title":"Explicit GAP-to-Julia and Julia-to-GAP Conversions","text":"","category":"section"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"gap_to_julia\njulia_to_gap","category":"page"},{"location":"conversion/#GAP.gap_to_julia","page":"Conversions","title":"GAP.gap_to_julia","text":"gap_to_julia(type, x, recursion_dict=nothing; recursive::Bool=true)\n\nTry to convert the object x to a Julia object of type type. If x is a GAP.GapObj then the conversion rules are defined in the manual of the GAP package JuliaInterface. If x is another GAP.Obj (for example a Int64) then the result is defined in Julia by type.\n\nThe parameter recursion_dict is used to preserve the identity of converted subobjects and should never be given by the user.\n\nFor GAP lists and records, it makes sense to convert also the subobjects recursively, or to keep the subobjects as they are; the behaviour is controlled by recursive, which can be true or false.\n\nExamples\n\njulia> GAP.gap_to_julia( GAP.evalstr( \"1/3\" ) )\n1//3\n\njulia> GAP.gap_to_julia( GAP.evalstr( \"\\\"abc\\\"\" ) )\n\"abc\"\n\njulia> val = GapObj([ 1 2 ; 3 4 ])\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> GAP.gap_to_julia( val )\n2-element Vector{Any}:\n Any[1, 2]\n Any[3, 4]\n\njulia> GAP.gap_to_julia( val, recursive = false )\n2-element Vector{Any}:\n GAP: [ 1, 2 ]\n GAP: [ 3, 4 ]\n\njulia> GAP.gap_to_julia( Vector{GapObj}, val )\n2-element Vector{GapObj}:\n GAP: [ 1, 2 ]\n GAP: [ 3, 4 ]\n\njulia> GAP.gap_to_julia( Matrix{Int}, val )\n2Ã—2 Matrix{Int64}:\n 1  2\n 3  4\n\n\n\n\n\n","category":"function"},{"location":"conversion/#GAP.julia_to_gap","page":"Conversions","title":"GAP.julia_to_gap","text":"julia_to_gap(input, recursion_dict = IdDict(); recursive::Bool = false)\n\nConvert a julia object input to an appropriate GAP object. If recursive is set to true, recursive conversions on arrays, tuples, and dictionaries is performed.\n\nThe input recursion_dict should never be set by the user, it is meant to keep egality of input data, by converting egal data to identical objects in GAP.\n\nExamples\n\njulia> GAP.julia_to_gap(1//3)\nGAP: 1/3\n\njulia> GAP.julia_to_gap(\"abc\")\nGAP: \"abc\"\n\njulia> GAP.julia_to_gap([ [1, 2], [3, 4]])\nGAP: [ <Julia: [1, 2]>, <Julia: [3, 4]> ]\n\njulia> GAP.julia_to_gap([ [1, 2], [3, 4]], recursive = true)\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\n\n\n\n\n\n","category":"function"},{"location":"conversion/#Constructor-Methods-for-GAP-to-Julia-Conversions","page":"Conversions","title":"Constructor Methods for GAP-to-Julia Conversions","text":"","category":"section"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"(For Julia-to-GAP conversions, one can use GapObj and GAP.Obj as constructors.)","category":"page"},{"location":"conversion/","page":"Conversions","title":"Conversions","text":"Int128\nBigInt\nRational\nFloat64\nbig\nChar\nCuchar\nString\nSymbol\nUnitRange\nStepRange\nTuple\nBitVector\nVector{T}\nMatrix{T}\nSet{T}\nDict{Symbol,T}","category":"page"},{"location":"conversion/#Core.Int128","page":"Conversions","title":"Core.Int128","text":"Int128(obj::GapObj)\n\nReturn the Int128 converted from the GAP integer obj. (Note that small GAP integers are represented by Julia Int64 objects, in particular they are not GapObjs; their conversion is not handled by methods installed in GAP.jl.)\n\nExamples\n\njulia> val = GAP.evalstr(\"2^80\")\nGAP: 1208925819614629174706176\n\njulia> Int128(val)\n1208925819614629174706176\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.GMP.BigInt","page":"Conversions","title":"Base.GMP.BigInt","text":"BigInt(obj::GapObj)\n\nReturn the big integer converted from the GAP integer obj. (Note that small GAP integers are not represented by GapObjs, their conversion with BigInt is handled by Julia's methods.)\n\nExamples\n\njulia> val = GAP.evalstr(\"2^64\")\nGAP: 18446744073709551616\n\njulia> BigInt(val)\n18446744073709551616\n\njulia> val = GAP.evalstr(\"2^59\")\n576460752303423488\n\njulia> isa(val, GapObj)\nfalse\n\njulia> BigInt(val)\n576460752303423488\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Rational","page":"Conversions","title":"Base.Rational","text":"Rational{T}(obj::GapObj) where {T<:Integer}\n\nReturn the rational converted from the GAP integer or the GAP rational obj,\n\nExamples\n\njulia> val = GAP.evalstr(\"2^64\")\nGAP: 18446744073709551616\n\njulia> Rational{Int128}(val)\n18446744073709551616//1\n\njulia> Rational{BigInt}(val)\n18446744073709551616//1\n\njulia> val = GAP.evalstr(\"1/3\")\nGAP: 1/3\n\njulia> Rational{Int64}(val)\n1//3\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Core.Float64","page":"Conversions","title":"Core.Float64","text":"Float64(obj::GapObj)\n\nReturn the float converted from the GAP float obj.\n\nExamples\n\njulia> val = GAP.evalstr(\"2.2\")\nGAP: 2.2\n\njulia> Float64(val)\n2.2\n\njulia> Float32(val)\n2.2f0\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.big","page":"Conversions","title":"Base.big","text":"big(obj::GapObj)\n\nReturn the big integer converted from the GAP integer obj, or the big rational converted from the GAP rational obj, or the big float converted from the GAP float obj.\n\nExamples\n\njulia> val = GAP.evalstr(\"2^64\")\nGAP: 18446744073709551616\n\njulia> big(val)\n18446744073709551616\n\njulia> val = GAP.evalstr(\"1/3\")\nGAP: 1/3\n\njulia> big(val)\n1//3\n\njulia> val = GAP.evalstr(\"1.1\")\nGAP: 1.1\n\njulia> big(val)\n1.100000000000000088817841970012523233890533447265625\n\n\n\n\n\n\n","category":"function"},{"location":"conversion/#Core.Char","page":"Conversions","title":"Core.Char","text":"Char(obj::GapObj)\n\nReturn the character converted from the GAP character obj.\n\nExamples\n\njulia> val = GAP.evalstr(\"'x'\")\nGAP: 'x'\n\njulia> Char(val)\n'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Cuchar","page":"Conversions","title":"Base.Cuchar","text":"Cuchar(obj::GapObj)\n\nReturn the UInt8 that belongs to the GAP character obj.\n\nExamples\n\njulia> val = GAP.evalstr(\"'x'\")\nGAP: 'x'\n\njulia> Cuchar(val)\n0x78\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Core.String","page":"Conversions","title":"Core.String","text":"String(obj::GapObj)\n\nReturn the Julia string converted from the GAP string obj. Note that GAP's String function can be applied to arbitrary GAP objects, similar to Julia's string function; this behaviour is not intended for this String constructor.\n\nExamples\n\njulia> val = GAP.evalstr(\"\\\"abc\\\"\")\nGAP: \"abc\"\n\njulia> String(val)\n\"abc\"\n\njulia> val = GAP.evalstr(\"[]\")\nGAP: [  ]\n\njulia> String(val)   # an empty GAP list is a string\n\"\"\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Core.Symbol","page":"Conversions","title":"Core.Symbol","text":"Symbol(obj::GapObj)\n\nReturn the symbol converted from the GAP string obj.\n\nExamples\n\njulia> str = GAP.evalstr(\"\\\"abc\\\"\")\nGAP: \"abc\"\n\njulia> Symbol(str)\n:abc\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.UnitRange","page":"Conversions","title":"Base.UnitRange","text":"UnitRange(obj::GapObj)\n\nReturn the unit range converted from the GAP range obj, which has step width 1.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ 1 .. 10 ]\")\nGAP: [ 1 .. 10 ]\n\njulia> UnitRange(val)\n1:10\n\njulia> UnitRange{Int32}(val)\n1:10\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.StepRange","page":"Conversions","title":"Base.StepRange","text":"StepRange(obj::GapObj)\n\nReturn the step range converted from the GAP range obj, which may have arbitrary step width.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ 1, 3 .. 11 ]\")\nGAP: [ 1, 3 .. 11 ]\n\njulia> StepRange(val)\n1:2:11\n\njulia> r = StepRange{Int8,Int8}(val)\n1:2:11\n\njulia> typeof(r)\nStepRange{Int8, Int8}\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Core.Tuple","page":"Conversions","title":"Core.Tuple","text":"Tuple{Types...}(obj::GapObj; recursive = true)\n\nReturn the tuple converted from the GAP list obj. The entries of the list are converted to the required types Types..., using gap_to_julia. If recursive is true then the entries of the list are converted recursively, otherwise non-recursively.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ 1, 5 ]\")\nGAP: [ 1, 5 ]\n\njulia> Tuple{Int64,Int64}(val)\n(1, 5)\n\njulia> val = GAP.evalstr(\"[ [ 1 ], [ 2 ] ]\")\nGAP: [ [ 1 ], [ 2 ] ]\n\njulia> Tuple{Any,Any}(val)\n(Any[1], Any[2])\n\njulia> Tuple{GapObj,GapObj}(val, recursive = false)\n(GAP: [ 1 ], GAP: [ 2 ])\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.BitVector","page":"Conversions","title":"Base.BitVector","text":"BitVector(obj::GapObj)\n\nReturn the bit vector converted from the GAP list of booleans obj.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ true, false, true ]\")\nGAP: [ true, false, true ]\n\njulia> BitVector(val)\n3-element BitVector:\n 1\n 0\n 1\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Vector","page":"Conversions","title":"Base.Vector","text":"Vector{T}(obj::GapObj; recursive = true)\n\nReturn the 1-dimensional array converted from the GAP list obj. The entries of the list are converted to the type T, using gap_to_julia. If recursive is true then the entries of the list are converted recursively, otherwise non-recursively.\n\nIf T is UInt8 then obj may be a GAP string.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ [ 1 ], [ 2 ] ]\")\nGAP: [ [ 1 ], [ 2 ] ]\n\njulia> Vector{Any}(val)\n2-element Vector{Any}:\n Any[1]\n Any[2]\n\njulia> Vector{Any}(val, recursive = false)\n2-element Vector{Any}:\n GAP: [ 1 ]\n GAP: [ 2 ]\n\njulia> val = GAP.evalstr( \"NewVector( IsPlistVectorRep, Integers, [ 0, 2, 5 ] )\" )\nGAP: <plist vector over Integers of length 3>\n\njulia> Vector{Int64}( val )\n3-element Vector{Int64}:\n 0\n 2\n 5\n\njulia> val = GAP.evalstr(\"\\\"abc\\\"\")\nGAP: \"abc\"\n\njulia> Vector{UInt8}(val)\n3-element Vector{UInt8}:\n 0x61\n 0x62\n 0x63\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Matrix","page":"Conversions","title":"Base.Matrix","text":"Matrix{T}(obj::GapObj; recursive = true)\n\nReturn the 2-dimensional array converted from the GAP matrix obj, which can be a GAP list of lists or a GAP matrix object. The entries of the matrix are converted to the type T, using gap_to_julia. If recursive is true then the entries are converted recursively, otherwise non-recursively.\n\nExamples\n\njulia> val = GAP.evalstr(\"[ [ 1, 2 ], [ 3, 4 ] ]\")\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> Matrix{Int64}(val)\n2Ã—2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> val = GAP.evalstr( \"NewMatrix( IsPlistMatrixRep, Integers, 2, [ 0, 1, 2, 3 ] )\" )\nGAP: <2x2-matrix over Integers>\n\njulia> Matrix{Int64}(val)\n2Ã—2 Matrix{Int64}:\n 0  1\n 2  3\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Set","page":"Conversions","title":"Base.Set","text":"Set{T}(obj::GapObj; recursive = true)\n\nReturn the set converted from the GAP list or GAP collection obj. The elements of obj are converted to the required type T, using gap_to_julia. If recursive is true then the elements are converted recursively, otherwise non-recursively.\n\nThis constructor method is intended for situations where the result involves only native Julia objects such as integers and strings. Dealing with results containing GAP objects will be inefficient.\n\nExamples\n\njulia> Set{Int}(GAP.evalstr(\"[ 1, 2, 1 ]\"))\nSet{Int64} with 2 elements:\n  2\n  1\n\njulia> Set{Vector{Int}}(GAP.evalstr(\"[[1], [2], [1]]\"))\nSet{Vector{Int64}} with 2 elements:\n  [1]\n  [2]\n\njulia> Set{String}(GAP.evalstr(\"[\\\"a\\\", \\\"b\\\"]\"))\nSet{String} with 2 elements:\n  \"b\"\n  \"a\"\n\njulia> Set{Any}(GAP.evalstr(\"[[1], [2], [1]]\"))\nSet{Any} with 2 elements:\n  Any[1]\n  Any[2]\n\n\nIn the following examples, the order in which the Julia output is shown may vary.\n\nExamples\n\njulia> s = Set{Any}(GAP.evalstr(\"[[1], [2], [1]]\"), recursive = false);\n\njulia> s == Set{Any}([GAP.evalstr(\"[ 1 ]\"), GAP.evalstr(\"[ 2 ]\")])\ntrue\n\njulia> s = Set{Any}(GAP.evalstr(\"SymmetricGroup(2)\"), recursive = false);\n\njulia> s == Set{Any}([GAP.evalstr(\"()\"), GAP.evalstr(\"(1,2)\")])\ntrue\n\n\n\n\n\n\n","category":"type"},{"location":"conversion/#Base.Dict","page":"Conversions","title":"Base.Dict","text":"Dict{Symbol,T}(obj::GapObj; recursive = true)\n\nReturn the dictionary converted from the GAP record obj. If recursive is true then the values of the record components are recursively converted to objects of the type T, using gap_to_julia, otherwise they are kept as they are.\n\nExamples\n\njulia> val = GAP.evalstr(\"rec( a:= 1, b:= 2 )\")\nGAP: rec( a := 1, b := 2 )\n\njulia> Dict{Symbol,Int}(val)\nDict{Symbol, Int64} with 2 entries:\n  :a => 1\n  :b => 2\n\njulia> val = GAP.evalstr(\"rec( l:= [ 1, 2 ] )\")\nGAP: rec( l := [ 1, 2 ] )\n\njulia> Dict{Symbol,Any}(val, recursive = false)\nDict{Symbol, Any} with 1 entry:\n  :l => GAP: [ 1, 2 ]\n\njulia> Dict{Symbol,Any}(val, recursive = true)\nDict{Symbol, Any} with 1 entry:\n  :l => Any[1, 2]\n\njulia> Dict{Symbol,Vector{Int}}(val, recursive = true)\nDict{Symbol, Vector{Int64}} with 1 entry:\n  :l => [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"manualindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"manualindex/","page":"Index","title":"Index","text":"","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"CurrentModule = GAP\nDocTestSetup = :(using GAP)","category":"page"},{"location":"basics/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"basics/#Accessing-GAP-from-Julia","page":"Basics","title":"Accessing GAP from Julia","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Any global GAP variable and function can be access from Julia via the GAP.Globals object; for example GAP.Globals.Binomial(5,3).","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"The GAP.prompt command can be used to switch to a GAP session that works like a regular GAP, except that leaving it (via quit; or by pressing Ctrl-D) returns one to a Julia prompt. From the GAP prompt, one can access Julia variables via the Julia object, for example Julia.binomial(5,3). For more details on how to access Julia from GAP, please consult the manual of the GAP package JuliaInterface.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Alternatively, one can start GAP in the traditional way, by executing a shell script. Such a script can be created in a location of your choice via GAP.create_gap_sh.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Globals\nevalstr\nGAP.prompt\nGAP.create_gap_sh","category":"page"},{"location":"basics/#GAP.Globals","page":"Basics","title":"GAP.Globals","text":"Globals\n\nThis is a global object that gives access to all global variables of the current GAP session via getproperty and setproperty!.\n\nExamples\n\njulia> GAP.Globals.Size    # a global GAP function\nGAP: <Attribute \"Size\">\n\njulia> GAP.Globals.size    # there is no GAP variable with this name\nERROR: GAP variable size not bound\n[...]\n\njulia> hasproperty( GAP.Globals, :size )\nfalse\n\njulia> GAP.Globals.size = 17;\n\njulia> hasproperty( GAP.Globals, :size )\ntrue\n\njulia> GAP.Globals.size\n17\n\njulia> GAP.Globals.Julia   # Julia objects can be values of GAP variables\nMain\n\n\n\n\n\n\n","category":"constant"},{"location":"basics/#GAP.evalstr","page":"Basics","title":"GAP.evalstr","text":"evalstr(cmd::String)\n\nLet GAP execute the command(s) given by cmd; if an error occurs then report this error, otherwise if the last command has a result then return it, otherwise return nothing.\n\nExamples\n\njulia> GAP.evalstr( \"1+2\" )\n3\n\njulia> GAP.evalstr( \"x:= []\" )\nGAP: [  ]\n\njulia> GAP.evalstr( \"y:= 2; Add( x, 1 )\" )\n\njulia> GAP.evalstr( \"x\" )\nGAP: [ 1 ]\n\n\n\n\n\n\n","category":"function"},{"location":"basics/#GAP.prompt","page":"Basics","title":"GAP.prompt","text":"prompt()\n\nStart a GAP prompt where you can enter GAP commands as in a regular GAP session. This prompt can be left as any GAP prompt by either entering quit; or pressing ctrl-D, which returns to the Julia prompt.\n\nThis GAP prompt allows to quickly switch between writing Julia and GAP code in a session where all data is shared.\n\n\n\n\n\n","category":"function"},{"location":"basics/#GAP.create_gap_sh","page":"Basics","title":"GAP.create_gap_sh","text":"create_gap_sh(dstdir::String)\n\nGiven a directory path, create three files in that directory:\n\na shell script named gap.sh which acts like the gap.sh shipped with a regular GAP installation, but which behind the scenes launches GAP via Julia.\ntwo TOML files, Manifest.toml and Project.toml, which are required by gap.sh to function (they record the precise versions of GAP.jl and other Julia packages involved)\n\n\n\n\n\n","category":"function"},{"location":"basics/#Accessing-Julia-from-GAP","page":"Basics","title":"Accessing Julia from GAP","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"The GAP-Julia interface is fully bidirectional, so it is also possible to access all Julia functionality from GAP. To learn more about this, please consult the manual of the GAP package JuliaInterface.","category":"page"},{"location":"basics/#Types","page":"Basics","title":"Types","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"FFE\nGapObj\nGAP.Obj\nGapInt","category":"page"},{"location":"basics/#GAP.FFE","page":"Basics","title":"GAP.FFE","text":"FFE\n\nWrap a pointer to a GAP FFE (\"finite field element\") immediate object. This type is defined in the JuliaInterface C code.\n\nExamples\n\njulia> x = GAP.Globals.Z(3)\nGAP: Z(3)\n\njulia> typeof(x)\nFFE\n\n\n\n\n\n\n","category":"type"},{"location":"basics/#GAP.GapObj","page":"Basics","title":"GAP.GapObj","text":"GapObj\n\nThis is the Julia type of all those GAP objects that are not \"immediate\" (booleans, small integers, FFEs).\n\nExamples\n\njulia> typeof( GAP.evalstr( \"[ 1, 2 ]\" ) ) # a GAP list\nGapObj\n\njulia> typeof( GAP.evalstr( \"rec()\" ) )    # a GAP record\nGapObj\n\njulia> typeof( GAP.evalstr( \"(1,2,3)\" ) )  # a GAP permutation\nGapObj\n\njulia> typeof( GAP.evalstr( \"2^64\" ) )     # a large GAP integer\nGapObj\n\njulia> typeof( GAP.evalstr( \"2^59\" ) )     # a small GAP integer\nInt64\n\njulia> typeof( GAP.evalstr( \"Z(2)\" ) )     # a GAP FFE\nFFE\n\njulia> typeof( GAP.evalstr( \"true\" ) )     # a boolean\nBool\n\n\nNote that this is Julia's viewpoint on GAP objects. From the viewpoint of GAP, also the pointers to Julia objects are implemented as \"non-immediate GAP objects\", but they appear as Julia objects to Julia, not \"doubly wrapped\".\n\nExamples\n\njulia> GAP.evalstr( \"Julia.Base\" )\nBase\n\njulia> typeof( GAP.evalstr( \"Julia.Base\" ) )        # native Julia object\nModule\n\n\nOne can use GapObj as a constructor, in order to convert Julia objects to GAP objects. Such calls are delegated to julia_to_gap.\n\nHowever, this is restricted to outputs that actually are of type GapObj. To also deal with GAP integers, finite field elements and booleans, use GAP.Obj instead.\n\nExamples\n\njulia> GapObj(1//3)\nGAP: 1/3\n\njulia> GapObj([1 2; 3 4])\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> GapObj(42)\nERROR: TypeError: in typeassert, expected GapObj, got a value of type Int64\n\n\n\n\n\n\n","category":"type"},{"location":"basics/#GAP.Obj","page":"Basics","title":"GAP.Obj","text":"GAP.Obj\n\nThis is an alias for Union{GapObj,FFE,Int64,Bool}. This type union covers all types a \"native\" GAP object may have from Julia's viewpoint.\n\nMoreover, it can be used as a constructor, in order to convert Julia objects to GAP objects, whenever a suitable conversion has been defined.\n\nExamples\n\njulia> GAP.Obj(1//3)\nGAP: 1/3\n\njulia> GAP.Obj([1 2; 3 4])\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> GAP.Obj(42)\n42\n\n\n\n\n\n\n","category":"type"},{"location":"basics/#GAP.GapInt","page":"Basics","title":"GAP.GapInt","text":"GapInt\n\nAny GAP integer object is represened in Julia as either a GapObj (if it is a \"large\" integer) or as an Int (if it is a \"small\" integer). This type union can be used to express this conveniently, e.g. when one wants to help type stability.\n\nNote that also GAP's infinity and -infinity fit under this type (as do many other objects which are not numbers).\n\n\n\n\n\n","category":"type"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"CurrentModule = GAP\nDocTestSetup = :(using GAP)","category":"page"},{"location":"other/#Other-stuff","page":"Other stuff","title":"Other stuff","text":"","category":"section"},{"location":"other/#Macros","page":"Other stuff","title":"Macros","text":"","category":"section"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"@gap\n@g_str\n@gapwrap\n@gapattribute\n@wrap","category":"page"},{"location":"other/#GAP.@gap","page":"Other stuff","title":"GAP.@gap","text":"@gap <expr>\n@gap(<expr>)\n\nExecute <expr> directly in GAP, as if GAP.evalstr(\"<expr>\") was called. This can be used for creating GAP literals directly from Julia.\n\nExamples\n\njulia> @gap [1,2,3]\nGAP: [ 1, 2, 3 ]\n\njulia> @gap SymmetricGroup(3)\nGAP: Sym( [ 1 .. 3 ] )\n\njulia> @gap(SymmetricGroup)(3)\nGAP: Sym( [ 1 .. 3 ] )\n\n\nNote that the last two examples have a slight syntactical, and therefore also a semantical difference. The first one executes the string SymmetricGroup(3) directly inside GAP. The second example returns the function SymmetricGroup via @gap(SymmetricGroup), then calls that function with the argument 3.\n\nDue to Julia's way of handing over arguments into the code of macros, not all expressions representing valid GAP code can be processed. For example, the GAP syntax of permutations consisting of more than one cycle cause problems, as well as the GAP syntax of non-dense lists.\n\njulia> @gap (1,2,3)\nGAP: (1,2,3)\n\njulia> @gap (1,2)(3,4)\nERROR: LoadError: Error thrown by GAP: Error, no method found! For debugging hints type ?Recovery from NoMethodFound\n[...]\n\njulia> @gap [ 1,, 2 ]\nERROR: syntax: unexpected \",\"\n[...]\n\n\nNote also that a string argument gets evaluated with GAP.evalstr.\n\njulia> @gap \"\\\"abc\\\"\"\nGAP: \"abc\"\n\njulia> @gap \"[1,,2]\"\nGAP: [ 1,, 2 ]\n\njulia> @gap \"(1,2)(3,4)\"\nGAP: (1,2)(3,4)\n\n\n\n\n\n\n","category":"macro"},{"location":"other/#GAP.@g_str","page":"Other stuff","title":"GAP.@g_str","text":"@g_str\n\nCreate a GAP string by typing g\"content\".\n\nExamples\n\njulia> g\"foo\"\nGAP: \"foo\"\n\njulia> g\"ab\\ncd\\\"ef\\\\gh\"   # special characters are handled as in GAP\nGAP: \"ab\\ncd\\\"ef\\\\gh\"\n\n\nDue to Julia's way of handing over arguments into the code of macros, not all strings representing valid GAP strings can be processed.\n\njulia> g\"\\\\\"\nERROR: LoadError: Error thrown by GAP: Syntax error: String must end with \" before end of file in stream:1\n[...]\n\n\nConversely, there are valid arguments for the macro that are not valid Julia strings.\n\njulia> g\"\\c\"\nGAP: \"\\c\"\n\n\n\n\n\n\n","category":"macro"},{"location":"other/#GAP.@gapwrap","page":"Other stuff","title":"GAP.@gapwrap","text":"@gapwrap\n\nWhen applied to a method definition that involves access to entries of GAP.Globals, this macro rewrites the code (using @generated) such that the relevant entries are cached at compile time, and need not be fetched again and again at runtime.\n\nExamples\n\njulia> @gapwrap isevenint(x) = GAP.Globals.IsEvenInt(x)::Bool;\n\njulia> isevenint(1)\nfalse\n\njulia> isevenint(2)\ntrue\n\n\n\n\n\n\n","category":"macro"},{"location":"other/#GAP.@gapattribute","page":"Other stuff","title":"GAP.@gapattribute","text":"@gapattribute\n\nThis macro is intended to be applied to a method definition for a unary function called attr, say, where the argument has the type T, say, the code contains exactly one call of the form GAP.Globals.Something(X), where Something is a GAP attribute such as Centre or IsSolvableGroup, and attr returns the corresponding attribute value for its argument.\n\nThe macro defines three functions attr, hasattr, and setattr, where attr takes an argument of type T and returns what the given method definition says, hasattr takes an argument of type T and returns the result of GAP.Globals.HasSomething(X) (which is either true or false), setattr takes an argument of type T and an object obj and calls GAP.Globals.SetSomething(X, obj).\n\nIn order to avoid runtime access via GAP.Globals.Something etc., the same modifications are applied in the construction of the three functions that are applied by @gapwrap.\n\nThe variables that are created by the macro belong to the Julia module in whose scope the macro is called.\n\nExamples\n\njulia> @gapattribute isstrictlysortedlist(obj::GAP.GapObj) = GAP.Globals.IsSSortedList(obj)::Bool;\n\njulia> l = GapObj([ 1, 3, 7 ]);\n\njulia> hasisstrictlysortedlist( l )\nfalse\n\njulia> isstrictlysortedlist( l )\ntrue\n\njulia> hasisstrictlysortedlist( l )\ntrue\n\njulia> l = GapObj([ 1, 3, 7 ]);\n\njulia> hasisstrictlysortedlist( l )\nfalse\n\njulia> setisstrictlysortedlist( l, true )\n\njulia> hasisstrictlysortedlist( l )\ntrue\n\njulia> isstrictlysortedlist( l )\ntrue\n\n\n\n\n\n\n","category":"macro"},{"location":"other/#GAP.@wrap","page":"Other stuff","title":"GAP.@wrap","text":"@wrap funcdecl\n\nWhen applied to a function declaration of the form NAME(a::T) or NAME(a::T)::S, this macro generates a function which behaves equivalently to NAME(a::T) = GAP.Globals.NAME(a) resp. NAME(a::T) = GAP.Globals.NAME(a)::S, assuming that GAP.Globals.NAME references a GAP function. Function declarations with more than one argument or zero arguments are also supported.\n\nHowever, the generated function actually is implemented using the @generated macro and caches the GAP object GAP.Globals.NAME and then produce optimal code to invoke that GAP function. This minimizes the call overhead. So @wrap typically is used to provide an optimized way to call certain GAP functions.\n\nAnother use case for this macro is to improve type stability of code calling into GAP, via the type annotations for the arguments and return value contained in the function declaration.\n\nBe advised, though, that if the value of GAP.Globals.NAME is changed later on, the function generated by this macro will not be updated, i.e., it will still reference the original GAP object.\n\nExamples\n\njulia> GAP.@wrap Jacobi(x::GapInt, y::GapInt)::Int\nJacobi (generic function with 1 method)\n\njulia> Jacobi(11,35)\n1\n\n\n\n\n\n","category":"macro"},{"location":"other/#Convenience-adapters","page":"Other stuff","title":"Convenience adapters","text":"","category":"section"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"This section describes how one can manipulate GAP objects from the Julia side, using Julia syntax features.","category":"page"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"call_gap_func\ncall_with_catch\ngetindex\nsetindex!\ngetproperty\nsetproperty!\nhasproperty\nwrap_rng\nrandseed!","category":"page"},{"location":"other/#GAP.call_gap_func","page":"Other stuff","title":"GAP.call_gap_func","text":"call_gap_func(func::GapObj, args...; kwargs...)\n\nCall the GAP object func as a function, with arguments args... and global GAP options kwargs..., and return the result if there is one, and nothing otherwise.\n\nThere is no argument number checking here, all checks on the arguments are done by GAP itself.\n\nFor convenience, one can use the syntax func(args...; kwargs...).\n\nExamples\n\njulia> GAP.Globals.Factors( 12 )\nGAP: [ 2, 2, 3 ]\n\njulia> g = GAP.Globals.SylowSubgroup( GAP.Globals.SymmetricGroup( 6 ), 2 )\nGAP: Group([ (1,2), (3,4), (1,3)(2,4), (5,6) ])\n\njulia> GAP.Globals.StructureDescription( g )\nGAP: \"C2 x D8\"\n\njulia> g = GAP.Globals.SylowSubgroup( GAP.Globals.SymmetricGroup( 6 ), 2 );\n\njulia> GAP.Globals.StructureDescription( g, short = true )\nGAP: \"2xD8\"\n\n\n\n\n\n\n","category":"function"},{"location":"other/#GAP.call_with_catch","page":"Other stuff","title":"GAP.call_with_catch","text":"call_with_catch( juliafunc, arguments )\n\nReturn a tuple ( ok, val ) where ok is either true, meaning that calling the function juliafunc with arguments returns the value val, or false, meaning that the function call runs into an error; in the latter case, val is set to the string of the error message.\n\nExamples\n\njulia> GAP.call_with_catch( sqrt, 2 )\n(true, 1.4142135623730951)\n\njulia> GAP.call_with_catch( sqrt, -2 )\n(false, \"DomainError(-2.0, \\\"sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\\\")\")\n\n\n\n\n\n\n","category":"function"},{"location":"other/#Base.getindex","page":"Other stuff","title":"Base.getindex","text":"getindex(x::GapObj, i::Int64)\ngetindex(x::GapObj, i::Int64, j::Int64)\ngetindex(x::GapObj, l::Union{Vector{T},AbstractRange{T}}) where {T<:Integer}\n\nReturn the entry at position i or at position (i,j) in x, or the list of entries in x at the positions described by l, provided that x is a GAP object supporting this, such as a GAP list or matrix object.\n\nExamples\n\njulia> l = GapObj([ 1, 2, 3, 5, 8, 13 ])\nGAP: [ 1, 2, 3, 5, 8, 13 ]\n\njulia> l[4]\n5\n\njulia> l[end]\n13\n\njulia> l[2:4]\nGAP: [ 2, 3, 5 ]\n\njulia> l[[1,4,4]]\nGAP: [ 1, 5, 5 ]\n\njulia> m = GapObj([ 1 2 ; 3 4 ])\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> m[1,1]\n1\n\njulia> m[1,2]\n2\n\njulia> m[2,1]\n3\n\n\n\n\n\n\n","category":"function"},{"location":"other/#Base.setindex!","page":"Other stuff","title":"Base.setindex!","text":"setindex!(x::GapObj, v::Any, i::Int64)\nsetindex!(x::GapObj, v::Any, i::Int64, j::Int64)\nsetindex!(x::GapObj, v::Any, l::Union{Vector{T},AbstractRange{T}}) where {T<:Integer}\n\nSet the entry at position i or (i,j) in x to v, or set the entries at the positions in x that are described by l to the entries in v, provided that x is a GAP object supporting this, such as a GAP list or matrix object.\n\nExamples\n\njulia> l = GapObj([ 1, 2, 3, 5, 8, 13 ])\nGAP: [ 1, 2, 3, 5, 8, 13 ]\n\njulia> l[1] = 0\n0\n\njulia> l[8] = -1\n-1\n\njulia> l[2:4] = [ 7, 7, 7 ]\n3-element Vector{Int64}:\n 7\n 7\n 7\n\njulia> l\nGAP: [ 0, 7, 7, 7, 8, 13,, -1 ]\n\njulia> m = GapObj([ 1 2 ; 3 4 ])\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> m[1,2] = 0\n0\n\njulia> m\nGAP: [ [ 1, 0 ], [ 3, 4 ] ]\n\n\n\n\n\n\n","category":"function"},{"location":"other/#Base.getproperty","page":"Other stuff","title":"Base.getproperty","text":"getproperty(x::GapObj, f::Symbol)\ngetproperty(x::GapObj, f::Union{AbstractString,Int64})\n\nReturn the record component of the GAP record x that is described by f.\n\nExamples\n\njulia> r = GAP.evalstr( \"rec( a:= 1 )\" )\nGAP: rec( a := 1 )\n\njulia> r.a\n1\n\n\n\n\n\n\n","category":"function"},{"location":"other/#Base.setproperty!","page":"Other stuff","title":"Base.setproperty!","text":"setproperty!(x::GapObj, f::Symbol, v)\nsetproperty!(x::GapObj, f::Union{AbstractString,Int64}, v)\n\nSet the record component of the GAP record x that is described by f to the value v.\n\nExamples\n\njulia> r = GAP.evalstr( \"rec( a:= 1 )\" )\nGAP: rec( a := 1 )\n\njulia> r.b = 0\n0\n\njulia> r\nGAP: rec( a := 1, b := 0 )\n\n\n\n\n\n\n","category":"function"},{"location":"other/#Base.hasproperty","page":"Other stuff","title":"Base.hasproperty","text":"hasproperty(x::GapObj, f::Symbol)\nhasproperty(x::GapObj, f::Union{AbstractString,Int64})\n\nReturn true if the GAP record x has a component that is described by f, and false otherwise.\n\nExamples\n\njulia> r = GAP.evalstr( \"rec( a:= 1 )\" )\nGAP: rec( a := 1 )\n\njulia> hasproperty( r, :a )\ntrue\n\njulia> hasproperty( r, :b )\nfalse\n\njulia> r.b = 2\n2\n\njulia> hasproperty( r, :b )\ntrue\n\njulia> r\nGAP: rec( a := 1, b := 2 )\n\n\n\n\n\n\n","category":"function"},{"location":"other/#GAP.wrap_rng","page":"Other stuff","title":"GAP.wrap_rng","text":"wrap_rng(rng::Random.AbstractRNG)\n\nReturn a GAP object in the filter IsRandomSource that uses rng in calls to GAP's Random function. The idea is that GAP's Random methods for high level objects will just hand over the given random source to subfunctions until Random gets called for a list or the bounds of a range, and then Base.rand gets called with rng.\n\nExamples\n\njulia> rng1 = Random.default_rng();\n\njulia> rng2 = copy(rng1);\n\njulia> rng1 == rng2\ntrue\n\njulia> rng1 === rng2\nfalse\n\njulia> gap_rng1 = GAP.wrap_rng(rng1)\nGAP: <RandomSource in IsRandomSourceJulia>\n\njulia> gap_rng2 = GAP.wrap_rng(rng2)\nGAP: <RandomSource in IsRandomSourceJulia>\n\njulia> res1 = GAP.Globals.Random(gap_rng1, 1, 10);\n\njulia> rng1 == rng2   # the two rngs have diverged\nfalse\n\njulia> res1 == GAP.Globals.Random(gap_rng2, GAP.GapObj(1:10))\ntrue\n\njulia> rng1 == rng2   # now the two rngs are again in sync\ntrue\n\njulia> g = GAP.Globals.SymmetricGroup(10);\n\njulia> p = GAP.Globals.Random(gap_rng1, g);\n\njulia> p in g\ntrue\n\njulia> GAP.Globals.Random(gap_rng1, GAP.Globals.GF(2)^10)\nGAP: <a GF2 vector of length 10>\n\n\n\n\n\n\n","category":"function"},{"location":"other/#GAP.randseed!","page":"Other stuff","title":"GAP.randseed!","text":"GAP.randseed!([seed::Integer])\n\nReseed GAP's global RNG with seed.\n\nThe given seed must be a non-negative integer. When seed is not specified, a random seed is generated from Julia's global RNG.\n\nFor a fixed seed, the stream of generated numbers is allowed to change between different versions of GAP.\n\n\n\n\n\n","category":"function"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"For the following Julia functions, methods are provided that deal with the case that the arguments are GAP objects; they delegate to the corresponding GAP operations.","category":"page"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"Julia GAP\nlength Length\nin \\in\nzero ZERO\none ONE\n- (unary) AINV\n+ SUM\n- (binary) DIFF\n* PROD\n/ QUO\n\\ LQUO\n^ POW\nmod MOD\n< LT\n== EQ","category":"page"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"julia> l = GAP.julia_to_gap( [ 1, 3, 7, 15 ] )\nGAP: [ 1, 3, 7, 15 ]\n\njulia> m = GAP.julia_to_gap( [ 1 2; 3 4 ] )\nGAP: [ [ 1, 2 ], [ 3, 4 ] ]\n\njulia> length( l )\n4\n\njulia> length( m )  # different from Julia's behaviour\n2\n\njulia> 1 in l\ntrue\n\njulia> 2 in l\nfalse\n\njulia> zero( l )\nGAP: [ 0, 0, 0, 0 ]\n\njulia> one( m )\nGAP: [ [ 1, 0 ], [ 0, 1 ] ]\n\njulia> - l\nGAP: [ -1, -3, -7, -15 ]\n\njulia> l + 1\nGAP: [ 2, 4, 8, 16 ]\n\njulia> l + l\nGAP: [ 2, 6, 14, 30 ]\n\njulia> m + m\nGAP: [ [ 2, 4 ], [ 6, 8 ] ]\n\njulia> 1 - m\nGAP: [ [ 0, -1 ], [ -2, -3 ] ]\n\njulia> l * l\n284\n\njulia> l * m\nGAP: [ 10, 14 ]\n\njulia> m * m\nGAP: [ [ 7, 10 ], [ 15, 22 ] ]\n\njulia> 1 / m\nGAP: [ [ -2, 1 ], [ 3/2, -1/2 ] ]\n\njulia> m / 2\nGAP: [ [ 1/2, 1 ], [ 3/2, 2 ] ]\n\njulia> 2 \\ m\nGAP: [ [ 1/2, 1 ], [ 3/2, 2 ] ]\n\njulia> m ^ 2\nGAP: [ [ 7, 10 ], [ 15, 22 ] ]\n\njulia> m ^ -1\nGAP: [ [ -2, 1 ], [ 3/2, -1/2 ] ]\n\njulia> mod( l, 3 )\nGAP: [ 1, 0, 1, 0 ]\n\njulia> m < 2 * m\ntrue\n\njulia> m^2 - 5 * m == 2 * one( m )\ntrue\n","category":"page"},{"location":"other/#Access-to-the-GAP-help-system","page":"Other stuff","title":"Access to the GAP help system","text":"","category":"section"},{"location":"other/","page":"Other stuff","title":"Other stuff","text":"show_gap_help","category":"page"},{"location":"other/#GAP.show_gap_help","page":"Other stuff","title":"GAP.show_gap_help","text":"show_gap_help(topic::String, onlyexact::Bool = false)\n\nPrint the information from the GAP help system about topic to the screen. If onlyexact is true then only exact matches are shown, otherwise all matches. For example, GAP.show_gap_help(\"Size\") shows also documentation for SizeScreen and SizesPerfectGroups, whereas GAP.show_gap_help(\"Size\", true) shows only documentation for Size.\n\nFor the variant showing all matches, one can also enter ?GAP.Globals.Size at the Julia prompt instead of calling show_gap_help.\n\nExamples\n\njulia> GAP.show_gap_help( \"Size\" )\n[...]  # more than 50 entries from GAP manuals\n\nhelp?> GAP.Globals.Size\n[...]  # the same\n\njulia> GAP.show_gap_help( \"Size\", true )\n[...]  # about 15 entries from GAP manuals\n\n\n\n\n\n\n","category":"function"},{"location":"packages/","page":"Managing GAP packages","title":"Managing GAP packages","text":"CurrentModule = GAP\nDocTestSetup = :(using GAP)","category":"page"},{"location":"packages/#Managing-GAP-packages","page":"Managing GAP packages","title":"Managing GAP packages","text":"","category":"section"},{"location":"packages/","page":"Managing GAP packages","title":"Managing GAP packages","text":"The following functions allow one to load/install/update/remove GAP packages.","category":"page"},{"location":"packages/","page":"Managing GAP packages","title":"Managing GAP packages","text":"GAP.Packages.load\nGAP.Packages.install\nGAP.Packages.update\nGAP.Packages.remove","category":"page"},{"location":"packages/#GAP.Packages.load","page":"Managing GAP packages","title":"GAP.Packages.load","text":"load(spec::String, version::String = \"\"; install = false)\n\nTry to load the newest installed version of the GAP package with name spec. Return true if this is successful, and false otherwise.\n\nThe function calls GAP's LoadPackage function; the package banner is not printed.\n\nIf install is set to true and the required GAP package is not yet installed then install is called first, in order to install the newest released version of the package.\n\n\n\n\n\n","category":"function"},{"location":"packages/#GAP.Packages.install","page":"Managing GAP packages","title":"GAP.Packages.install","text":"install(spec::String; interactive::Bool = true, pkgdir::AbstractString = GAP.Packages.DEFAULT_PKGDIR, quiet::Bool = false)\n\nDownload and install the newest released version of the GAP package given by spec into the pkgdir directory. Return true if the installation is successful or if the package was already installed, and false otherwise.\n\nspec can be either the name of a package or the URL of an archive or repository containing a package, or the URL of a PackageInfo.g file.\n\nThe function uses the function InstallPackage from GAP's package PackageManager. The info messages shown by this function can be suppressed by passing true as the value of quiet. Specifying interactive = false will prevent PackageManager from prompting the user for input interactively. For details, please refer to its documentation.\n\n\n\n\n\n","category":"function"},{"location":"packages/#GAP.Packages.update","page":"Managing GAP packages","title":"GAP.Packages.update","text":"update(spec::String; interactive::Bool = true, pkgdir::AbstractString = GAP.Packages.DEFAULT_PKGDIR, quiet::Bool = false)\n\nUpdate the GAP package given by spec that is installed in the pkgdir directory, to the latest version. Return true if a newer version was installed successfully, or if no newer version is available, and false otherwise.\n\nspec can be either the name of a package or the URL of an archive or repository containing a package, or the URL of a PackageInfo.g file.\n\nThe function uses the function UpdatePackage from GAP's package PackageManager. The info messages shown by this function can be suppressed by passing true as the value of quiet. Specifying interactive = false will prevent PackageManager from prompting the user for input interactively. For details, please refer to its documentation.\n\n\n\n\n\n","category":"function"},{"location":"packages/#GAP.Packages.remove","page":"Managing GAP packages","title":"GAP.Packages.remove","text":"remove(spec::String; interactive::Bool = true, pkgdir::AbstractString = GAP.Packages.DEFAULT_PKGDIR, quiet::Bool = false)\n\nRemove the GAP package with name spec that is installed in the pkgdir directory. Return true if the removal was successful, and false otherwise.\n\nThe function uses the function RemovePackage from GAP's package PackageManager. The info messages shown by this function can be suppressed by passing true as the value of quiet. Specifying interactive = false will prevent PackageManager from prompting the user for input interactively. For details, please refer to its documentation.\n\n\n\n\n\n","category":"function"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"CurrentModule = GAP\nDocTestSetup = :(using GAP)","category":"page"},{"location":"#GAP.jl","page":"GAP.jl","title":"GAP.jl","text":"","category":"section"},{"location":"#Introduction","page":"GAP.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"GAP.jl is a low level interface from Julia to the computer algebra system GAP. The term \"low level\" means that the aim is to give Julia access to all GAP objects, to let Julia call GAP functions, and to provide conversions of low level data (integers, Booleans, strings, arrays/lists, dictionaries/records) between the two systems.","category":"page"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"In particular, it is not the aim of GAP.jl to provide Julia types for higher level GAP objects that represent algebraic structures, such as groups, rings, fields, etc., and mappings between such structures.","category":"page"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"The connection between GAP and Julia is in fact bidirectional, that is, GAP can access all Julia objects, call Julia functions, and perform conversions of low level data. This direction will become interesting on the Julia side as soon as GAP packages provide functionality that is based on using Julia code from the GAP side.","category":"page"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"The viewpoint of an interface from GAP to Julia is described in the manual of the GAP package JuliaInterface.","category":"page"},{"location":"#Table-of-contents","page":"GAP.jl","title":"Table of contents","text":"","category":"section"},{"location":"","page":"GAP.jl","title":"GAP.jl","text":"","category":"page"}]
}
