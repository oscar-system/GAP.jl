using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libncurses"], :libncurses),
    LibraryProduct(prefix, ["libtinfo"], :libtinfo),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/ncursesBuilder/releases/download/v6.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/ncurses.v6.1.0.aarch64-linux-gnu.tar.gz", "db328650a8ba4be096544a13810690bafcd8ee562845d197615582846f010046"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/ncurses.v6.1.0.aarch64-linux-musl.tar.gz", "35d01274e5c1de8c3cfccfd933b4fe3bcb0321734e6ddfd2b6efb8d7eb4aa9ed"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/ncurses.v6.1.0.arm-linux-gnueabihf.tar.gz", "2aefb68b27b609ff1235016c278917899405ec5a1fa2d81819244835ee99a4c1"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/ncurses.v6.1.0.arm-linux-musleabihf.tar.gz", "28a601738aac8c252b22095d2099490f0dfa6dacfe70bfb6c551d03c980a869f"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/ncurses.v6.1.0.i686-linux-gnu.tar.gz", "5245ac9f06eab9978318b318173645ca70e6780f1ff93fff9cec85bfad9499b8"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/ncurses.v6.1.0.i686-linux-musl.tar.gz", "cca71a153374ef99e014ce0780ebbd1e4391d7b06f64a4d96a683c26efcbd67c"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/ncurses.v6.1.0.powerpc64le-linux-gnu.tar.gz", "111c95f36edd2a4bb6bdd5fceadf8604b4b715596c0d7d9a6302e6da02c4a95a"),
    MacOS(:x86_64) => ("$bin_prefix/ncurses.v6.1.0.x86_64-apple-darwin14.tar.gz", "d73e0a9e53c11cde5f4144c4506b4306a5cf19aef50fd1d09a4ee862f31641ba"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ncurses.v6.1.0.x86_64-linux-gnu.tar.gz", "1564aae811a9c479032e850f752ca3681a3b948d3e98271d5872653c99845317"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/ncurses.v6.1.0.x86_64-linux-musl.tar.gz", "3fae45dfe68c6d2177963364d54c7ddbf0ed87be3c96d0eca654b4da3ebd9c9b"),
    FreeBSD(:x86_64) => ("$bin_prefix/ncurses.v6.1.0.x86_64-unknown-freebsd11.1.tar.gz", "27a4310912995db0365fe91a5a57a7ab88dbdb22f93e62776bc635807eca40c5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
