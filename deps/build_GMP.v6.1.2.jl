using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgmp"], :libgmp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/GMP-v6.1.2-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GMP.v6.1.2.aarch64-linux-gnu.tar.gz", "4d28fceb862f2537fdb725d61a49da88dfb2f2844aaac580ccdb34c124aed595"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GMP.v6.1.2.aarch64-linux-musl.tar.gz", "8baf5e90d331f371d14638c3380bb4c978dae1eff8461251229c9e7900c6d632"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GMP.v6.1.2.arm-linux-gnueabihf.tar.gz", "70bd39164333796c2cfaa750452586c3b6f0d665f75541e765e9bdf096523ee7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GMP.v6.1.2.arm-linux-musleabihf.tar.gz", "4ab27def3f8699159293a9d7433f00f7cea4734d9861cecc08675814e94e2c18"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GMP.v6.1.2.i686-linux-gnu.tar.gz", "a6fc3f5414ff5720dc9e46eadda10146abf63c21334d382001c0cf009f5a45f2"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GMP.v6.1.2.i686-linux-musl.tar.gz", "b2702e15d79f29ade0dec9aa4e3c7e9f2a35a4094facf653b7344b1935a4e89d"),
    Windows(:i686) => ("$bin_prefix/GMP.v6.1.2.i686-w64-mingw32.tar.gz", "1e2813c1c41541f75a423bf0e11ac195229a213d1d4522c8eb0b695f86f6801e"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GMP.v6.1.2.powerpc64le-linux-gnu.tar.gz", "ce104418a5745296f7fe07184e736c436d4bcc0692cf2b84c2ce1a662d937265"),
    MacOS(:x86_64) => ("$bin_prefix/GMP.v6.1.2.x86_64-apple-darwin14.tar.gz", "ed7ccfb5b7797277ef8c3640624ee6df4587c08a6be5ba5d7cbec4a0c6ee9b49"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GMP.v6.1.2.x86_64-linux-gnu.tar.gz", "0c90ba39a431553fbe58cf277adef5cead2f344247393828c113b8a997e595e8"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GMP.v6.1.2.x86_64-linux-musl.tar.gz", "d3c1558153c41ad2c7b5db4677f5cc8dddac8fc74cbbc9acf1e085ce11c4d3fb"),
    FreeBSD(:x86_64) => ("$bin_prefix/GMP.v6.1.2.x86_64-unknown-freebsd11.1.tar.gz", "0fa62d3d156c550de5e4d1347707a492c79b87375e9b5e8beb717faad4eaff72"),
    Windows(:x86_64) => ("$bin_prefix/GMP.v6.1.2.x86_64-w64-mingw32.tar.gz", "7017c999c3c0bed9e2b546039feb1af9736aed8bc811395fd3a79b90c9d9872f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
