name: Test GAP package distro

on:
  push:
    branches:
      - 'master'
      - 'release-*'
    tags: '*'
  pull_request:
  schedule:
    # Every Monday at 3:08 AM UTC
    - cron: '8 3 * * 1'
  workflow_dispatch:

concurrency:
  # group by workflow and ref; the last slightly strange component ensures that for pull
  # requests, we limit to 1 concurrent job, but for the default repository branch we don't
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref_name != github.event.repository.default_branch || github.run_number }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      gap-packages: ${{ steps.set-matrix.outputs.gap-packages }}
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: "Cache artifacts"
        uses: julia-actions/cache@v2
      - name: "Build package"
        uses: julia-actions/julia-buildpkg@v1
      - name: Get list of GAP packages
        id: set-matrix
        run: julia --project=. -e '
                  using Artifacts, TOML;
                  output = sprint(print, "gap-packages=", map(name -> name[9:end], sort!(collect(filter(startswith("GAP_pkg_"), keys(TOML.parsefile(find_artifacts_toml(Base.active_project()))))))));
                  println(output);
                  open(ENV["GITHUB_OUTPUT"], "a") do io;
                    println(io, output);
                  end;'

  test:
    name: ${{ matrix.gap-package }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    continue-on-error: ${{ matrix.julia-version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        julia-version:
          - '1'
        julia-arch:
          - x64
        os:
          - ubuntu-latest
        gap-package: ${{fromJSON(needs.generate-matrix.outputs.gap-packages)}}
        exclude:
          - gap-package: 'atlasrep'                   # random segfaults during testing
          - gap-package: 'autodoc'                    # tries and fails to build its own documentation, inside the (partially write protected) artifacts dir
          - gap-package: 'example'                    # no jll
          - gap-package: 'examplesforhomalg'          # `Error, found no GAP executable in PATH`
          - gap-package: 'guava'                      # random test failures in `guava-3.19/tst/guava.tst:649`: Syntax error: expression expected in /tmp/gaptempfile.i8tlxS:1 GUAVA_TEMP_VAR := ï¿½ &
          - gap-package: 'hap'                        # `polymake command not found. Please set POLYMAKE_COMMAND by hand`
          - gap-package: 'hapcryst'                   # `polymake command not found. Please set POLYMAKE_COMMAND by hand`
          - gap-package: 'help'                       # test failure in HeLP-4.0/tst/yes_4ti2.tst:39
          - gap-package: 'io'                         # segfaults, most likely due to child process handling
          - gap-package: 'itc'                        # dependency `xgap` has no jll
          - gap-package: 'localizeringforhomalg'      # `Error, found no GAP executable in PATH`
          - gap-package: 'normalizinterface'          # Tests fail: NormalizInterface currently bundles Normaliz 3.9.3 and its test suite is tuned to that, but our JLL builds it against normaliz_jll which has 3.10.2
          - gap-package: 'packagemanager'             # tests need curlInterface to passe, reactivate once we have a working JLL for that
          - gap-package: 'polycyclic'                 # test suite currently broken and also disabled by GAP package distribution
          - gap-package: 'polymaking'                 # `polymake command not found. Please set POLYMAKE_COMMAND by hand`
          - gap-package: 'profiling'                  # segfaults during testing
          - gap-package: 'ringsforhomalg'             # `Error, found no GAP executable in PATH`
          - gap-package: 'semigroups'                 # no jll
          - gap-package: 'xgap'                       # no jll

    steps:
      - uses: actions/checkout@v4
      - name: "Install extra dependencies"
        run: sudo apt-get install --no-install-recommends texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended dot2tex
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: 'Install PARI/GP'  # for alnuth, and thus guarana, polenta, radiroot
        if: matrix.gap-package == 'alnuth' || matrix.gap-package == 'guarana' || matrix.gap-package == 'polenta' || matrix.gap-package == 'radiroot'
        run: |
          sudo apt-get update
          sudo apt-get install pari-gp
      - name: "Cache artifacts"
        uses: julia-actions/cache@v2
        with:
          include-matrix: false # don't create a cache per GAP package
          cache-scratchspaces: false
      - name: "Build package"
        uses: julia-actions/julia-buildpkg@v1
      - name: "Run GAP package tests"
        run: |
          julia --color=yes --project=. -e 'using GAP, Test; @test GAP.Packages.test("${{ matrix.gap-package }}")'
