name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.julia-version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        julia-version:
          - '1.3'
          - '1.4'
          - '1.5'
          - 'nightly'
        julia-arch:
          - x64
        os:
          - ubuntu-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-runtest@latest
      - name: Add optional Julia depdencies for GAP tests
        run: julia -e 'using Pkg; Pkg.add(["Singular", "Nemo"])'
      - name: GAP tests
        run: |
          julia -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            using GAP
            GAP.Packages.install("io", interactive = false)
            GAP.Packages.install("profiling", interactive = false)
            '
          gap_sh=$(julia -e 'import GAP; print(GAP.gap_exe())');
          export GAP="$gap_sh -A --quitonbreak --norepl"
          etc/ci_test.sh

      - uses: julia-actions/julia-processcoverage@v1
      - name: Process GAP coverage
        run: |
          gap_sh=$(julia -e 'import GAP; print(GAP.gap_exe())');
          $gap_sh -A --quitonbreak --norepl etc/gather_coverage.g
          cat gap-lcov.info >> lcov.info

      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: lcov.info
          github-token: ${{ secrets.github_token }}
          flag-name: ${{ matrix.name }}
          parallel: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - name: Install package
        run: |
          julia --project=docs --color=yes -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - name: Run doctests
        run: |
          julia --project=docs --color=yes test/doctest.jl
      - name: Deploy documentation
        run: julia --project=docs --color=yes docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
