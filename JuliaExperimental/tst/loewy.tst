#############################################################################
##
#W  loewy.tst          GAP 4 package JuliaExperimental          Thomas Breuer
##
gap> START_TEST( "loewy.tst" );

##  Test the general functionality of Singer algebras (not Julia related).
gap> a:= SingerAlgebra( 5, 2, 4 );;  ParametersOfSingerAlgebra( a );
[ 5, 2, 4 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  CanonicalBasis( a );
CanonicalBasis( A(5,2,4) )
gap> a:= SingerAlgebra( 5, 2, 4 );;  Zero( Random( a ) );
0*b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  Representative( a );
b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  One( a );
b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  Zero( a );
0*b0
gap> a:= SingerAlgebra( 5, 2, 4 );;  GeneratorsOfAlgebra( a );
[ b0, b1, b2, b3, b4, b5, b6 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  GeneratorsOfAlgebraWithOne( a );
[ b0, b1, b2, b3, b4, b5, b6 ]
gap> a:= SingerAlgebra( 5, 2, 4 );;  Centre( a );
A(5,2,4)

##  Test the minimal degree computation (in Julia).
gap> for e in [ 2 .. 30 ] do
>      for q in PrimeResidues( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        m:= MinimalDegreeOfSingerAlgebra( a );
>        if m <> MinimalDegreeOfSingerAlgebra( q, e ) then
>          Error( "bad result for ", [ q, e ], "\n"  );
>        fi;
>        Print( [ q, e, m ], "\n" );
>      od;
>    od;
[ 3, 2, 2 ]
[ 4, 3, 3 ]
[ 2, 3, 2 ]
[ 5, 4, 4 ]
[ 3, 4, 2 ]
[ 6, 5, 5 ]
[ 2, 5, 2 ]
[ 3, 5, 2 ]
[ 4, 5, 2 ]
[ 7, 6, 6 ]
[ 5, 6, 2 ]
[ 8, 7, 7 ]
[ 2, 7, 3 ]
[ 3, 7, 2 ]
[ 4, 7, 3 ]
[ 5, 7, 2 ]
[ 6, 7, 2 ]
[ 9, 8, 8 ]
[ 3, 8, 4 ]
[ 5, 8, 4 ]
[ 7, 8, 2 ]
[ 10, 9, 9 ]
[ 2, 9, 2 ]
[ 4, 9, 3 ]
[ 5, 9, 2 ]
[ 7, 9, 3 ]
[ 8, 9, 2 ]
[ 11, 10, 10 ]
[ 3, 10, 2 ]
[ 7, 10, 2 ]
[ 9, 10, 2 ]
[ 12, 11, 11 ]
[ 2, 11, 2 ]
[ 3, 11, 3 ]
[ 4, 11, 3 ]
[ 5, 11, 3 ]
[ 6, 11, 2 ]
[ 7, 11, 2 ]
[ 8, 11, 2 ]
[ 9, 11, 3 ]
[ 10, 11, 2 ]
[ 13, 12, 12 ]
[ 5, 12, 4 ]
[ 7, 12, 6 ]
[ 11, 12, 2 ]
[ 14, 13, 13 ]
[ 2, 13, 2 ]
[ 3, 13, 3 ]
[ 4, 13, 2 ]
[ 5, 13, 2 ]
[ 6, 13, 2 ]
[ 7, 13, 2 ]
[ 8, 13, 2 ]
[ 9, 13, 3 ]
[ 10, 13, 2 ]
[ 11, 13, 2 ]
[ 12, 13, 2 ]
[ 15, 14, 14 ]
[ 3, 14, 2 ]
[ 5, 14, 2 ]
[ 9, 14, 4 ]
[ 11, 14, 4 ]
[ 13, 14, 2 ]
[ 16, 15, 15 ]
[ 2, 15, 4 ]
[ 4, 15, 6 ]
[ 7, 15, 3 ]
[ 8, 15, 4 ]
[ 11, 15, 5 ]
[ 13, 15, 3 ]
[ 14, 15, 2 ]
[ 17, 16, 16 ]
[ 3, 16, 4 ]
[ 5, 16, 4 ]
[ 7, 16, 4 ]
[ 9, 16, 8 ]
[ 11, 16, 4 ]
[ 13, 16, 4 ]
[ 15, 16, 2 ]
[ 18, 17, 17 ]
[ 2, 17, 2 ]
[ 3, 17, 2 ]
[ 4, 17, 2 ]
[ 5, 17, 2 ]
[ 6, 17, 2 ]
[ 7, 17, 2 ]
[ 8, 17, 2 ]
[ 9, 17, 2 ]
[ 10, 17, 2 ]
[ 11, 17, 2 ]
[ 12, 17, 2 ]
[ 13, 17, 2 ]
[ 14, 17, 2 ]
[ 15, 17, 2 ]
[ 16, 17, 2 ]
[ 19, 18, 18 ]
[ 5, 18, 2 ]
[ 7, 18, 6 ]
[ 11, 18, 2 ]
[ 13, 18, 6 ]
[ 17, 18, 2 ]
[ 20, 19, 19 ]
[ 2, 19, 2 ]
[ 3, 19, 2 ]
[ 4, 19, 3 ]
[ 5, 19, 3 ]
[ 6, 19, 3 ]
[ 7, 19, 3 ]
[ 8, 19, 2 ]
[ 9, 19, 3 ]
[ 10, 19, 2 ]
[ 11, 19, 3 ]
[ 12, 19, 2 ]
[ 13, 19, 2 ]
[ 14, 19, 2 ]
[ 15, 19, 2 ]
[ 16, 19, 3 ]
[ 17, 19, 3 ]
[ 18, 19, 2 ]
[ 21, 20, 20 ]
[ 3, 20, 4 ]
[ 7, 20, 4 ]
[ 9, 20, 4 ]
[ 11, 20, 10 ]
[ 13, 20, 4 ]
[ 17, 20, 4 ]
[ 19, 20, 2 ]
[ 22, 21, 21 ]
[ 2, 21, 3 ]
[ 4, 21, 3 ]
[ 5, 21, 2 ]
[ 8, 21, 7 ]
[ 10, 21, 3 ]
[ 11, 21, 3 ]
[ 13, 21, 6 ]
[ 16, 21, 3 ]
[ 17, 21, 2 ]
[ 19, 21, 3 ]
[ 20, 21, 2 ]
[ 23, 22, 22 ]
[ 3, 22, 4 ]
[ 5, 22, 4 ]
[ 7, 22, 2 ]
[ 9, 22, 4 ]
[ 13, 22, 2 ]
[ 15, 22, 4 ]
[ 17, 22, 2 ]
[ 19, 22, 2 ]
[ 21, 22, 2 ]
[ 24, 23, 23 ]
[ 2, 23, 3 ]
[ 3, 23, 3 ]
[ 4, 23, 3 ]
[ 5, 23, 2 ]
[ 6, 23, 3 ]
[ 7, 23, 2 ]
[ 8, 23, 3 ]
[ 9, 23, 3 ]
[ 10, 23, 2 ]
[ 11, 23, 2 ]
[ 12, 23, 3 ]
[ 13, 23, 3 ]
[ 14, 23, 2 ]
[ 15, 23, 2 ]
[ 16, 23, 3 ]
[ 17, 23, 2 ]
[ 18, 23, 3 ]
[ 19, 23, 2 ]
[ 20, 23, 2 ]
[ 21, 23, 2 ]
[ 22, 23, 2 ]
[ 25, 24, 24 ]
[ 5, 24, 8 ]
[ 7, 24, 6 ]
[ 11, 24, 4 ]
[ 13, 24, 12 ]
[ 17, 24, 8 ]
[ 19, 24, 6 ]
[ 23, 24, 2 ]
[ 26, 25, 25 ]
[ 2, 25, 2 ]
[ 3, 25, 2 ]
[ 4, 25, 2 ]
[ 6, 25, 5 ]
[ 7, 25, 2 ]
[ 8, 25, 2 ]
[ 9, 25, 2 ]
[ 11, 25, 5 ]
[ 12, 25, 2 ]
[ 13, 25, 2 ]
[ 14, 25, 2 ]
[ 16, 25, 5 ]
[ 17, 25, 2 ]
[ 18, 25, 2 ]
[ 19, 25, 2 ]
[ 21, 25, 5 ]
[ 22, 25, 2 ]
[ 23, 25, 2 ]
[ 24, 25, 2 ]
[ 27, 26, 26 ]
[ 3, 26, 6 ]
[ 5, 26, 2 ]
[ 7, 26, 2 ]
[ 9, 26, 6 ]
[ 11, 26, 2 ]
[ 15, 26, 2 ]
[ 17, 26, 2 ]
[ 19, 26, 2 ]
[ 21, 26, 2 ]
[ 23, 26, 2 ]
[ 25, 26, 2 ]
[ 28, 27, 27 ]
[ 2, 27, 2 ]
[ 4, 27, 3 ]
[ 5, 27, 2 ]
[ 7, 27, 3 ]
[ 8, 27, 2 ]
[ 10, 27, 9 ]
[ 11, 27, 2 ]
[ 13, 27, 3 ]
[ 14, 27, 2 ]
[ 16, 27, 3 ]
[ 17, 27, 2 ]
[ 19, 27, 9 ]
[ 20, 27, 2 ]
[ 22, 27, 3 ]
[ 23, 27, 2 ]
[ 25, 27, 3 ]
[ 26, 27, 2 ]
[ 29, 28, 28 ]
[ 3, 28, 2 ]
[ 5, 28, 4 ]
[ 9, 28, 4 ]
[ 11, 28, 4 ]
[ 13, 28, 4 ]
[ 15, 28, 14 ]
[ 17, 28, 4 ]
[ 19, 28, 2 ]
[ 23, 28, 4 ]
[ 25, 28, 4 ]
[ 27, 28, 2 ]
[ 30, 29, 29 ]
[ 2, 29, 2 ]
[ 3, 29, 2 ]
[ 4, 29, 2 ]
[ 5, 29, 2 ]
[ 6, 29, 2 ]
[ 7, 29, 4 ]
[ 8, 29, 2 ]
[ 9, 29, 2 ]
[ 10, 29, 2 ]
[ 11, 29, 2 ]
[ 12, 29, 2 ]
[ 13, 29, 2 ]
[ 14, 29, 2 ]
[ 15, 29, 2 ]
[ 16, 29, 4 ]
[ 17, 29, 2 ]
[ 18, 29, 2 ]
[ 19, 29, 2 ]
[ 20, 29, 4 ]
[ 21, 29, 2 ]
[ 22, 29, 2 ]
[ 23, 29, 4 ]
[ 24, 29, 4 ]
[ 25, 29, 4 ]
[ 26, 29, 2 ]
[ 27, 29, 2 ]
[ 28, 29, 2 ]
[ 31, 30, 30 ]
[ 7, 30, 6 ]
[ 11, 30, 10 ]
[ 13, 30, 6 ]
[ 17, 30, 4 ]
[ 19, 30, 6 ]
[ 23, 30, 4 ]
[ 29, 30, 2 ]

##  Test the Loewy length computations in Julia.
gap> for e in [ 2 .. 30 ] do
>      for q in PrimeResidues( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          l:= LoewyLength( a );
>          if l <> LoewyLength( q, n, e ) then
>            Error( "bad result for ", [ q, n, e ], "\n"  );
>          fi;
>          Print( [ q, e, l ], "\n" );
>        fi;
>      od;
>    od;
[ 3, 2, 2 ]
[ 4, 3, 2 ]
[ 2, 3, 2 ]
[ 5, 4, 2 ]
[ 3, 4, 3 ]
[ 6, 5, 2 ]
[ 2, 5, 3 ]
[ 3, 5, 5 ]
[ 4, 5, 4 ]
[ 7, 6, 2 ]
[ 5, 6, 5 ]
[ 8, 7, 2 ]
[ 2, 7, 2 ]
[ 3, 7, 7 ]
[ 4, 7, 4 ]
[ 5, 7, 13 ]
[ 6, 7, 6 ]
[ 9, 8, 2 ]
[ 3, 8, 2 ]
[ 5, 8, 3 ]
[ 7, 8, 7 ]
[ 10, 9, 2 ]
[ 2, 9, 4 ]
[ 4, 9, 4 ]
[ 5, 9, 13 ]
[ 7, 9, 7 ]
[ 8, 9, 8 ]
[ 11, 10, 2 ]
[ 3, 10, 5 ]
[ 7, 10, 13 ]
[ 9, 10, 9 ]
[ 12, 11, 2 ]
[ 2, 11, 6 ]
[ 3, 11, 4 ]
[ 4, 11, 6 ]
[ 5, 11, 7 ]
[ 9, 11, 14 ]
[ 10, 11, 10 ]
[ 13, 12, 2 ]
[ 5, 12, 3 ]
[ 7, 12, 3 ]
[ 11, 12, 11 ]
[ 14, 13, 2 ]
[ 2, 13, 7 ]
[ 3, 13, 3 ]
[ 4, 13, 10 ]
[ 5, 13, 9 ]
[ 8, 13, 15 ]
[ 9, 13, 9 ]
[ 12, 13, 12 ]
[ 15, 14, 2 ]
[ 3, 14, 7 ]
[ 5, 14, 13 ]
[ 9, 14, 7 ]
[ 11, 14, 8 ]
[ 13, 14, 13 ]
[ 16, 15, 2 ]
[ 2, 15, 2 ]
[ 4, 15, 2 ]
[ 7, 15, 9 ]
[ 8, 15, 8 ]
[ 11, 15, 5 ]
[ 13, 15, 17 ]
[ 14, 15, 14 ]
[ 17, 16, 2 ]
[ 3, 16, 3 ]
[ 5, 16, 5 ]
[ 7, 16, 4 ]
[ 9, 16, 3 ]
[ 11, 16, 11 ]
[ 13, 16, 13 ]
[ 15, 16, 15 ]
[ 18, 17, 2 ]
[ 2, 17, 5 ]
[ 4, 17, 7 ]
[ 13, 17, 25 ]
[ 16, 17, 16 ]
[ 19, 18, 2 ]
[ 5, 18, 13 ]
[ 7, 18, 4 ]
[ 13, 18, 7 ]
[ 17, 18, 17 ]
[ 20, 19, 2 ]
[ 7, 19, 7 ]
[ 11, 19, 11 ]
[ 18, 19, 18 ]
[ 21, 20, 2 ]
[ 3, 20, 3 ]
[ 7, 20, 7 ]
[ 9, 20, 5 ]
[ 11, 20, 3 ]
[ 13, 20, 13 ]
[ 17, 20, 17 ]
[ 19, 20, 19 ]
[ 22, 21, 2 ]
[ 2, 21, 3 ]
[ 4, 21, 4 ]
[ 5, 21, 13 ]
[ 8, 21, 3 ]
[ 13, 21, 5 ]
[ 16, 21, 16 ]
[ 20, 21, 20 ]
[ 23, 22, 2 ]
[ 3, 22, 3 ]
[ 5, 22, 6 ]
[ 9, 22, 11 ]
[ 21, 22, 21 ]
[ 24, 23, 2 ]
[ 2, 23, 4 ]
[ 3, 23, 8 ]
[ 22, 23, 22 ]
[ 25, 24, 2 ]
[ 5, 24, 2 ]
[ 7, 24, 3 ]
[ 11, 24, 6 ]
[ 13, 24, 3 ]
[ 17, 24, 5 ]
[ 19, 24, 7 ]
[ 23, 24, 23 ]
[ 26, 25, 2 ]
[ 6, 25, 6 ]
[ 7, 25, 13 ]
[ 11, 25, 11 ]
[ 18, 25, 35 ]
[ 24, 25, 24 ]
[ 27, 26, 2 ]
[ 3, 26, 2 ]
[ 5, 26, 9 ]
[ 9, 26, 5 ]
[ 21, 26, 41 ]
[ 25, 26, 25 ]
[ 28, 27, 2 ]
[ 2, 27, 10 ]
[ 4, 27, 10 ]
[ 8, 27, 22 ]
[ 10, 27, 4 ]
[ 19, 27, 7 ]
[ 26, 27, 26 ]
[ 29, 28, 2 ]
[ 3, 28, 7 ]
[ 5, 28, 7 ]
[ 9, 28, 7 ]
[ 13, 28, 7 ]
[ 15, 28, 3 ]
[ 25, 28, 19 ]
[ 27, 28, 27 ]
[ 30, 29, 2 ]
[ 12, 29, 23 ]
[ 17, 29, 33 ]
[ 28, 29, 28 ]
[ 31, 30, 2 ]
[ 7, 30, 5 ]
[ 11, 30, 3 ]
[ 13, 30, 9 ]
[ 17, 30, 17 ]
[ 19, 30, 7 ]
[ 23, 30, 23 ]
[ 29, 30, 29 ]

##  Test 'DimensionsLoewyFactors'.
gap> for e in [ 2 .. 30 ] do
>      for q in PrimeResidues( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          v:= DimensionsLoewyFactors( a );
>          Print( [ q, e, v ], "\n" );
>        fi;
>      od;
>    od;
[ 3, 2, [ 1, 1 ] ]
[ 4, 3, [ 1, 1 ] ]
[ 2, 3, [ 1, 1 ] ]
[ 5, 4, [ 1, 1 ] ]
[ 3, 4, [ 1, 1, 1 ] ]
[ 6, 5, [ 1, 1 ] ]
[ 2, 5, [ 1, 2, 1 ] ]
[ 3, 5, [ 1, 6, 7, 2, 1 ] ]
[ 4, 5, [ 1, 1, 1, 1 ] ]
[ 7, 6, [ 1, 1 ] ]
[ 5, 6, [ 1, 1, 1, 1, 1 ] ]
[ 8, 7, [ 1, 1 ] ]
[ 2, 7, [ 1, 1 ] ]
[ 3, 7, [ 1, 17, 38, 31, 14, 3, 1 ] ]
[ 4, 7, [ 1, 7, 1, 1 ] ]
[ 5, 7, [ 1, 35, 146, 312, 451, 470, 387, 242, 125, 46, 14, 3, 1 ] ]
[ 6, 7, [ 1, 1, 1, 1, 1, 1 ] ]
[ 9, 8, [ 1, 1 ] ]
[ 3, 8, [ 1, 1 ] ]
[ 5, 8, [ 1, 2, 1 ] ]
[ 7, 8, [ 1, 1, 1, 1, 1, 1, 1 ] ]
[ 10, 9, [ 1, 1 ] ]
[ 2, 9, [ 1, 3, 3, 1 ] ]
[ 4, 9, [ 1, 3, 3, 1 ] ]
[ 5, 9, [ 1, 33, 126, 252, 351, 360, 291, 180, 93, 34, 12, 3, 1 ] ]
[ 7, 9, [ 1, 6, 9, 10, 9, 3, 1 ] ]
[ 8, 9, [ 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 11, 10, [ 1, 1 ] ]
[ 3, 10, [ 1, 2, 3, 2, 1 ] ]
[ 7, 10, [ 1, 10, 27, 40, 41, 38, 35, 22, 13, 8, 3, 2, 1 ] ]
[ 9, 10, [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 12, 11, [ 1, 1 ] ]
[ 2, 11, [ 1, 27, 40, 20, 5, 1 ] ]
[ 3, 11, [ 1, 11, 10, 1 ] ]
[ 4, 11, [ 1, 21, 40, 26, 5, 1 ] ]
[ 5, 11, [ 1, 26, 75, 96, 65, 21, 1 ] ]
[ 9, 11, [ 1, 46, 175, 401, 680, 911, 981, 865, 656, 395, 186, 61, 10, 1 ] ]
[ 10, 11, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 13, 12, [ 1, 1 ] ]
[ 5, 12, [ 1, 1, 1 ] ]
[ 7, 12, [ 1, 3, 1 ] ]
[ 11, 12, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 14, 13, [ 1, 1 ] ]
[ 2, 13, [ 1, 58, 127, 92, 31, 6, 1 ] ]
[ 3, 13, [ 1, 1, 1 ] ]
[ 4, 13, [ 1, 23, 56, 84, 74, 44, 22, 8, 3, 1 ] ]
[ 5, 13, [ 1, 6, 11, 12, 9, 4, 3, 2, 1 ] ]
[ 8, 13, [ 1, 10, 27, 40, 45, 50, 43, 36, 27, 18, 9, 4, 3, 2, 1 ] ]
[ 9, 13, [ 1, 10, 19, 10, 7, 7, 1, 1, 1 ] ]
[ 12, 13, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 15, 14, [ 1, 1 ] ]
[ 3, 14, [ 1, 11, 18, 13, 6, 3, 1 ] ]
[ 5, 14, [ 1, 29, 102, 186, 227, 222, 169, 98, 51, 22, 6, 3, 1 ] ]
[ 9, 14, [ 1, 7, 15, 16, 10, 3, 1 ] ]
[ 11, 14, [ 1, 7, 18, 22, 25, 15, 7, 1 ] ]
[ 13, 14, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 16, 15, [ 1, 1 ] ]
[ 2, 15, [ 1, 1 ] ]
[ 4, 15, [ 1, 1 ] ]
[ 7, 15, [ 1, 10, 28, 38, 39, 24, 16, 4, 1 ] ]
[ 8, 15, [ 1, 55, 81, 89, 31, 15, 1, 1 ] ]
[ 11, 15, [ 1, 2, 3, 2, 1 ] ]
[ 13, 15, [ 1, 22, 60, 108, 155, 200, 234, 250, 243, 210, 162, 116, 79, 44, 
      16, 4, 1 ] ]
[ 14, 15, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 17, 16, [ 1, 1 ] ]
[ 3, 16, [ 1, 4, 1 ] ]
[ 5, 16, [ 1, 8, 22, 8, 1 ] ]
[ 7, 16, [ 1, 1, 1, 1 ] ]
[ 9, 16, [ 1, 4, 1 ] ]
[ 11, 16, [ 1, 36, 113, 172, 193, 176, 131, 64, 25, 4, 1 ] ]
[ 13, 16, [ 1, 24, 76, 144, 221, 288, 336, 308, 225, 112, 42, 8, 1 ] ]
[ 15, 16, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 18, 17, [ 1, 1 ] ]
[ 2, 17, [ 1, 4, 6, 4, 1 ] ]
[ 4, 17, [ 1, 2, 3, 4, 3, 2, 1 ] ]
[ 13, 17, [ 1, 14, 39, 76, 109, 126, 139, 148, 157, 150, 139, 128, 117, 92, 
      71, 54, 41, 28, 19, 14, 9, 4, 3, 2, 1 ] ]
[ 16, 17, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 19, 18, [ 1, 1 ] ]
[ 5, 18, [ 1, 33, 90, 142, 177, 168, 127, 72, 33, 16, 6, 3, 1 ] ]
[ 7, 18, [ 1, 9, 9, 1 ] ]
[ 13, 18, [ 1, 12, 27, 43, 30, 9, 1 ] ]
[ 17, 18, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 20, 19, [ 1, 1 ] ]
[ 7, 19, [ 1, 7, 7, 1, 1, 1, 1 ] ]
[ 11, 19, [ 1, 10, 19, 13, 10, 7, 7, 1, 1, 1, 1 ] ]
[ 18, 19, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 21, 20, [ 1, 1 ] ]
[ 3, 20, [ 1, 3, 1 ] ]
[ 7, 20, [ 1, 27, 41, 35, 13, 3, 1 ] ]
[ 9, 20, [ 1, 1, 1, 1, 1 ] ]
[ 11, 20, [ 1, 5, 1 ] ]
[ 13, 20, [ 1, 19, 53, 107, 177, 235, 273, 255, 177, 91, 33, 7, 1 ] ]
[ 17, 20, [ 1, 19, 65, 139, 229, 339, 465, 563, 613, 591, 489, 339, 193, 91, 
      33, 7, 1 ] ]
[ 19, 20, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 22, 21, [ 1, 1 ] ]
[ 2, 21, [ 1, 2, 1 ] ]
[ 4, 21, [ 1, 1, 1, 1 ] ]
[ 5, 21, [ 1, 29, 74, 120, 157, 140, 99, 62, 35, 16, 8, 3, 1 ] ]
[ 8, 21, [ 1, 2, 1 ] ]
[ 13, 21, [ 1, 3, 3, 1, 1 ] ]
[ 16, 21, [ 1, 13, 25, 37, 25, 22, 19, 19, 10, 7, 7, 7, 1, 1, 1, 1 ] ]
[ 20, 21, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 23, 22, [ 1, 1 ] ]
[ 3, 22, [ 1, 10, 1 ] ]
[ 5, 22, [ 1, 40, 56, 40, 5, 1 ] ]
[ 9, 22, [ 1, 95, 321, 535, 595, 521, 370, 181, 60, 5, 1 ] ]
[ 21, 22, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
[ 24, 23, [ 1, 1 ] ]
[ 2, 23, [ 1, 44, 44, 1 ] ]
[ 3, 23, [ 1, 407, 2002, 2894, 1826, 517, 55, 1 ] ]
[ 22, 23, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 
     ] ]
[ 25, 24, [ 1, 1 ] ]
[ 5, 24, [ 1, 1 ] ]
[ 7, 24, [ 1, 1, 1 ] ]
[ 11, 24, [ 1, 1, 1, 1, 1, 1 ] ]
[ 13, 24, [ 1, 6, 1 ] ]
[ 17, 24, [ 1, 3, 5, 3, 1 ] ]
[ 19, 24, [ 1, 2, 3, 4, 3, 2, 1 ] ]
[ 23, 24, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1 ] ]
[ 26, 25, [ 1, 1 ] ]
[ 6, 25, [ 1, 25, 130, 130, 25, 1 ] ]
[ 7, 25, [ 1, 6, 11, 16, 17, 14, 11, 6, 5, 4, 3, 2, 1 ] ]
[ 11, 25, [ 1, 45, 215, 675, 1405, 1761, 1410, 705, 200, 25, 1 ] ]
[ 18, 25, [ 1, 14, 43, 84, 129, 170, 199, 228, 249, 262, 267, 276, 273, 270, 
      263, 240, 217, 194, 169, 144, 119, 94, 73, 56, 47, 38, 29, 20, 11, 6, 
      5, 4, 3, 2, 1 ] ]
[ 24, 25, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1 ] ]
[ 27, 26, [ 1, 1 ] ]
[ 3, 26, [ 1, 1 ] ]
[ 5, 26, [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ] ]
[ 9, 26, [ 1, 19, 7, 1, 1 ] ]
[ 21, 26, [ 1, 18, 51, 100, 165, 226, 267, 304, 337, 366, 395, 404, 409, 410, 
      411, 412, 393, 370, 347, 324, 301, 260, 223, 190, 161, 136, 111, 90, 
      73, 60, 47, 34, 25, 20, 15, 10, 5, 4, 3, 2, 1 ] ]
[ 25, 26, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1 ] ]
[ 28, 27, [ 1, 1 ] ]
[ 2, 27, [ 1, 423, 1998, 3252, 2556, 1116, 300, 54, 9, 1 ] ]
[ 4, 27, [ 1, 144, 765, 1569, 2511, 2961, 1452, 288, 18, 1 ] ]
[ 8, 27, [ 1, 57, 198, 424, 681, 915, 1090, 1206, 1212, 1102, 924, 696, 484, 
      306, 180, 112, 63, 33, 16, 6, 3, 1 ] ]
[ 10, 27, [ 1, 18, 18, 1 ] ]
[ 19, 27, [ 1, 21, 60, 91, 63, 18, 1 ] ]
[ 26, 27, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1 ] ]
[ 29, 28, [ 1, 1 ] ]
[ 3, 28, [ 1, 3, 6, 7, 6, 3, 1 ] ]
[ 5, 28, [ 1, 30, 123, 251, 135, 18, 1 ] ]
[ 9, 28, [ 1, 3, 6, 7, 6, 3, 1 ] ]
[ 13, 28, [ 1, 1, 1, 1, 1, 1, 1 ] ]
[ 15, 28, [ 1, 7, 1 ] ]
[ 25, 28, [ 1, 9, 18, 25, 33, 39, 46, 51, 57, 58, 54, 48, 43, 33, 21, 13, 6, 
      3, 1 ] ]
[ 27, 28, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1 ] ]
[ 30, 29, [ 1, 1 ] ]
[ 12, 29, [ 1, 10, 27, 44, 57, 66, 67, 68, 65, 66, 59, 48, 39, 30, 21, 16, 
      11, 6, 5, 4, 3, 2, 1 ] ]
[ 17, 29, [ 1, 14, 39, 76, 109, 134, 155, 172, 189, 194, 199, 196, 193, 186, 
      175, 156, 141, 120, 99, 82, 65, 48, 39, 30, 21, 16, 11, 6, 5, 4, 3, 2, 
      1 ] ]
[ 28, 29, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1, 1 ] ]
[ 31, 30, [ 1, 1 ] ]
[ 7, 30, [ 1, 16, 47, 16, 1 ] ]
[ 11, 30, [ 1, 3, 1 ] ]
[ 13, 30, [ 1, 32, 87, 210, 293, 222, 91, 16, 1 ] ]
[ 17, 30, [ 1, 43, 165, 307, 433, 435, 435, 317, 257, 155, 115, 57, 41, 15, 
      7, 1, 1 ] ]
[ 19, 30, [ 1, 3, 3, 3, 1, 1, 1 ] ]
[ 23, 30, [ 1, 43, 193, 427, 729, 915, 1109, 1087, 1107, 901, 805, 571, 475, 
      317, 257, 155, 115, 57, 41, 15, 7, 1, 1 ] ]
[ 29, 30, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1, 1, 1 ] ]

##  Test 'LoewyStructureInfo'.
gap> for e in [ 2 .. 30 ] do
>      for q in PrimeResidues( e ) do
>        if q = 1 then
>          q:= e+1;
>        fi;
>        n:= OrderMod( q, e );
>        a:= SingerAlgebra( q, n, e );
>        if Dimension( a ) < 10000 then
>          LoewyStructureInfo( a );
>        fi;
>      od;
>    od;

##  Test large e.
gap> q:= 17;;  n:= 19;;  e:= ( q^n - 1 ) / 2;
119536217842575662423576
gap> IsSmallIntRep( e );
false
gap> a:= SingerAlgebra( q, n, e );;
gap> Dimension( a );
3
gap> data:= LoewyStructureInfo( a );;
gap> keys:= Julia.Base.keys( data );;
gap> keys:= Julia.Base.collect( keys );;
gap> Set( JuliaToGAP( IsList, keys, true ) );
[ "chain", "inputs", "layers", "ll", "m", "monomials" ]

##  Test some error messages.
gap> SingerAlgebra( 2, 2, 0 );
Error, <q>, <n>, <e> must be positive integers
gap> SingerAlgebra( 1, 2, 3 );
Error, <q> must be an integer > 1
gap> SingerAlgebra( 7, 2, 5 );
Error, <e> must divide <q>^<n> - 1
gap> MinimalDegreeOfSingerAlgebra( 1, 2 );
Error, <q> must be an integer > 1
gap> LoewyLength( 1, 2, 3 );
Error, <q> must be an integer > 1

##  Test the Julia part.
gap> Julia.LoewyStructure.test_this_module();
true

##
gap> STOP_TEST( "loewy.tst" );

